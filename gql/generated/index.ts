import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigInt: any;
  ISO8601Date: any;
  ISO8601DateTime: any;
  JSON: any;
  Upload: any;
};

export type AccessPeriod = {
  __typename?: 'AccessPeriod';
  unit?: Maybe<AccessPeriodUnitKind>;
  value?: Maybe<Scalars['Int']>;
};

export enum AccessPeriodUnitKind {
  Days = 'days',
  Months = 'months',
  Weeks = 'weeks'
}

export type AccessToken = {
  __typename?: 'AccessToken';
  accessUntil?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  id: Scalars['ID'];
};

export enum ActionInput {
  Complete = 'COMPLETE',
  Draft = 'DRAFT'
}

/** Autogenerated return type of ActivateAccessCode */
export type ActivateAccessCodePayload = {
  __typename?: 'ActivateAccessCodePayload';
  accessToken?: Maybe<AccessToken>;
  errors?: Maybe<Array<Maybe<ProcessingError>>>;
};

/** Autogenerated return type of ActivateBundle */
export type ActivateBundlePayload = {
  __typename?: 'ActivateBundlePayload';
  errors?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
};

/** Autogenerated return type of ActivateChallenge */
export type ActivateChallengePayload = {
  __typename?: 'ActivateChallengePayload';
  challengeParticipation?: Maybe<ChallengeParticipant>;
  challengePass?: Maybe<ChallengePass>;
  errors?: Maybe<Array<Error>>;
};

/** Autogenerated return type of ActivateFullAccessCode */
export type ActivateFullAccessCodePayload = {
  __typename?: 'ActivateFullAccessCodePayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']>;
  user?: Maybe<CurrentUser>;
};

/** Autogenerated return type of ActivateGenericProgram */
export type ActivateGenericProgramPayload = {
  __typename?: 'ActivateGenericProgramPayload';
  errors?: Maybe<Array<Error>>;
  success: Scalars['Boolean'];
};

/** Autogenerated return type of ActivateLegacyPausaSmart */
export type ActivateLegacyPausaSmartPayload = {
  __typename?: 'ActivateLegacyPausaSmartPayload';
  accessDays?: Maybe<Scalars['Int']>;
  accessUntil?: Maybe<Scalars['ISO8601Date']>;
  action?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ProcessingError>>>;
};

/** Autogenerated return type of ActivateLiveEvent */
export type ActivateLiveEventPayload = {
  __typename?: 'ActivateLiveEventPayload';
  errors?: Maybe<Scalars['String']>;
  liveEventAccess?: Maybe<UserAccess>;
  success: Scalars['Boolean'];
};

/** Autogenerated return type of ActivateOneTimeCode */
export type ActivateOneTimeCodePayload = {
  __typename?: 'ActivateOneTimeCodePayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']>;
  user?: Maybe<CurrentUser>;
};

/** Autogenerated return type of ActivatePausaSmart */
export type ActivatePausaSmartPayload = {
  __typename?: 'ActivatePausaSmartPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of Activate */
export type ActivatePayload = {
  __typename?: 'ActivatePayload';
  accessToken?: Maybe<AccessToken>;
  errors: Array<ProcessingError>;
  genericProgram?: Maybe<GenericProgram>;
};

/** Autogenerated return type of ActivateTrialExtension */
export type ActivateTrialExtensionPayload = {
  __typename?: 'ActivateTrialExtensionPayload';
  errors?: Maybe<Array<Error>>;
  success?: Maybe<Scalars['Boolean']>;
  user?: Maybe<CurrentUser>;
};

/** Autogenerated return type of AddAdyenPaymentMethod */
export type AddAdyenPaymentMethodPayload = {
  __typename?: 'AddAdyenPaymentMethodPayload';
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']>;
  resultAction?: Maybe<AdyenAction>;
  resultCode?: Maybe<PaymentResultCodeKind>;
  transaction?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddComment */
export type AddCommentPayload = {
  __typename?: 'AddCommentPayload';
  comment?: Maybe<Comment>;
};

/** Autogenerated return type of AddFavoritePlaylist */
export type AddFavoritePlaylistPayload = {
  __typename?: 'AddFavoritePlaylistPayload';
  playlist?: Maybe<Playlist>;
};

/** Autogenerated return type of AddFavoriteVideo */
export type AddFavoriteVideoPayload = {
  __typename?: 'AddFavoriteVideoPayload';
  video?: Maybe<Video>;
};

/** Autogenerated return type of AddMoodTrackerAnswer */
export type AddMoodTrackerAnswerPayload = {
  __typename?: 'AddMoodTrackerAnswerPayload';
  errors: Array<Scalars['String']>;
  status: Scalars['Boolean'];
};

export type AddPayment = OrderPaymentInterface & {
  __typename?: 'AddPayment';
  amountCents: Scalars['Int'];
  amountCurrency: CurrencyKind;
  orderId: Scalars['String'];
  originalAmountCents?: Maybe<Scalars['Int']>;
  paymentProvider: PaymentProviderKind;
  state: PaymentStatusKind;
  success: Scalars['Boolean'];
};

/** Autogenerated return type of AddPlaylist */
export type AddPlaylistPayload = {
  __typename?: 'AddPlaylistPayload';
  playlist?: Maybe<Playlist>;
};

/** Autogenerated return type of AddSearchResult */
export type AddSearchResultPayload = {
  __typename?: 'AddSearchResultPayload';
  documentId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddStory */
export type AddStoryPayload = {
  __typename?: 'AddStoryPayload';
  story?: Maybe<Story>;
};

/** Autogenerated return type of AddTrustlyPaymentMethod */
export type AddTrustlyPaymentMethodPayload = {
  __typename?: 'AddTrustlyPaymentMethodPayload';
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']>;
  resultUrl?: Maybe<Scalars['String']>;
  transaction?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddUserFeedback */
export type AddUserFeedbackPayload = {
  __typename?: 'AddUserFeedbackPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of AddUserSchedule */
export type AddUserSchedulePayload = {
  __typename?: 'AddUserSchedulePayload';
  filename?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddVideoToPlaylist */
export type AddVideoToPlaylistPayload = {
  __typename?: 'AddVideoToPlaylistPayload';
  playlist?: Maybe<Playlist>;
};

/** Autogenerated return type of AddWaitingItem */
export type AddWaitingItemPayload = {
  __typename?: 'AddWaitingItemPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  success: Scalars['Boolean'];
};

export type AdyenAction = {
  __typename?: 'AdyenAction';
  actionType: Scalars['String'];
  httpMethod?: Maybe<Scalars['String']>;
  paymentData: Scalars['String'];
  paymentMethodType: Scalars['String'];
  redirectData?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type AnswerInput = {
  id: Scalars['ID'];
  values?: InputMaybe<Array<Scalars['String']>>;
};

/** Autogenerated return type of AnswerSurvey */
export type AnswerSurveyPayload = {
  __typename?: 'AnswerSurveyPayload';
  errors: Array<ProcessingError>;
};

export type AppleSubscriptionPrecheck = {
  __typename?: 'AppleSubscriptionPrecheck';
  /** User to which this original_transaction_id is bounded */
  existingUser?: Maybe<CurrentUser>;
  /** Shows whether this original_transaction_id is already bounded to some user or not */
  exists?: Maybe<Scalars['Boolean']>;
};

export type Assets = {
  __typename?: 'Assets';
  avatar?: Maybe<Scalars['String']>;
  headerImage?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AssignMobileDevice */
export type AssignMobileDevicePayload = {
  __typename?: 'AssignMobileDevicePayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<CurrentUser>;
};

/** Autogenerated return type of AssignPlanToTrial */
export type AssignPlanToTrialPayload = {
  __typename?: 'AssignPlanToTrialPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of AuthenticateUser */
export type AuthenticateUserPayload = {
  __typename?: 'AuthenticateUserPayload';
  token?: Maybe<Scalars['String']>;
  user?: Maybe<UserInterface>;
};

export type Autocomplete = {
  __typename?: 'Autocomplete';
  error?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  results: Array<Scalars['String']>;
};

export type AvailableSubscriptionPlan = {
  __typename?: 'AvailableSubscriptionPlan';
  /** Code that user applied */
  code?: Maybe<Scalars['String']>;
  /** Kind may be one of global, extra_global, subscription_discount_code, subscription_full_access_code, trial_campaign_code, one_time_code, trial_referral_code, trial_reclaim */
  codeType?: Maybe<Code>;
  /** Subscriptions that are full accesses will show up here after inputing a valid access code by user */
  fullAccesses?: Maybe<Array<UserSubscription>>;
  isCodeValid?: Maybe<Scalars['Boolean']>;
  /** One time code promotions will show up after inputing valid code. They do not have subscription plan assigned. They are extending access by defined days or access_until */
  oneTimeCodes?: Maybe<Array<UserSubscription>>;
  /** Subscriptions including basic and promotional */
  subscriptions: Array<UserSubscription>;
  /** Codes that will only extend trial period days, but are connected to referring user and can be used by referred user, giving the reffered user some extra days fo access_until and reffering user another extra days of access_until when reffered user will make first payment */
  trialReferralCodes?: Maybe<Array<UserSubscription>>;
  /** Promotional trial plans if available */
  trials?: Maybe<Array<UserSubscription>>;
  /** Localized, written by admins, custom success/failure message for user to show after applying the code */
  validationMessage?: Maybe<Scalars['String']>;
};

export type BlogPost = {
  __typename?: 'BlogPost';
  authors: Array<Scalars['ID']>;
  body: Scalars['String'];
  categories: Array<Scalars['String']>;
  featuredImage: Scalars['String'];
  id: Scalars['ID'];
  language: Scalars['String'];
  market: Array<Scalars['String']>;
  publishedAt: Scalars['ISO8601DateTime'];
  slug: Scalars['String'];
  tags: Array<Maybe<Scalars['String']>>;
  title: Scalars['String'];
};

export type BrowserInfoInput = {
  acceptHeader?: InputMaybe<Scalars['String']>;
  colorDepth?: InputMaybe<Scalars['Int']>;
  javaEnabled?: InputMaybe<Scalars['Boolean']>;
  language?: InputMaybe<Scalars['String']>;
  screenHeight?: InputMaybe<Scalars['Int']>;
  screenWidth?: InputMaybe<Scalars['Int']>;
  timeZoneOffset?: InputMaybe<Scalars['Int']>;
  userAgent?: InputMaybe<Scalars['String']>;
};

export type Bundle = {
  __typename?: 'Bundle';
  accessPeriodUnit?: Maybe<Scalars['String']>;
  accessPeriodValue?: Maybe<Scalars['Int']>;
  accessStrategy: BundleAccessStrategyKind;
  active: Scalars['Boolean'];
  bundleCategory?: Maybe<BundleCategoryKind>;
  bundleItems: BundleItem;
  client?: Maybe<Client>;
  heroImage?: Maybe<Scalars['String']>;
  heroMobileImage?: Maybe<Scalars['String']>;
  hiddenInListing: Scalars['Boolean'];
  id: Scalars['ID'];
  infoPanel?: Maybe<BundleInfoPanel>;
  infoPanel2?: Maybe<BundleInfoPanel2>;
  isUserEligible: Scalars['Boolean'];
  kind: BundleKind;
  metaDescription: Scalars['String'];
  metaImage?: Maybe<Scalars['String']>;
  promotionalImage?: Maybe<Scalars['String']>;
  publishedAt?: Maybe<Scalars['ISO8601DateTime']>;
  sections: Array<BundleSectionKind>;
  shortDescription: Scalars['String'];
  slug: Scalars['String'];
  tags: Array<Maybe<Scalars['String']>>;
  title: Scalars['String'];
  trailer?: Maybe<Video>;
  userAccess?: Maybe<UserAccess>;
  waitingItemInfo: WaitingItemInfo;
};

export enum BundleAccessStrategyKind {
  ByCode = 'by_code',
  ForAll = 'for_all',
  ForPremiumOnly = 'for_premium_only',
  ForUsersWithAccess = 'for_users_with_access'
}

export enum BundleCategoryKind {
  FaR = 'FaR',
  ContentHub = 'content_hub',
  Partners = 'partners'
}

export type BundleInfoPanel = {
  __typename?: 'BundleInfoPanel';
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type BundleInfoPanel2 = {
  __typename?: 'BundleInfoPanel2';
  image?: Maybe<Scalars['String']>;
  longText?: Maybe<Scalars['String']>;
  previewText?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type BundleItem = {
  __typename?: 'BundleItem';
  blogPosts: BundleSection;
  challenges: BundleSection;
  documents: BundleSection;
  liveEvents: BundleSection;
  playlists: BundleSection;
  programs: BundleSection;
  videos: BundleSection;
};

export enum BundleKind {
  BySubscription = 'by_subscription',
  WithAccess = 'with_access'
}

export type BundleSection = {
  __typename?: 'BundleSection';
  items: Array<Item>;
  viewAllUrl?: Maybe<Scalars['String']>;
};

export enum BundleSectionKind {
  BlogPosts = 'blog_posts',
  Challenges = 'challenges',
  Documents = 'documents',
  InfoPanel = 'info_panel',
  InfoPanel_2 = 'info_panel_2',
  LiveEvents = 'live_events',
  Playlists = 'playlists',
  Programs = 'programs',
  Videos = 'videos'
}

export type CampaignCode = {
  __typename?: 'CampaignCode';
  code: Scalars['String'];
  days: Scalars['Int'];
  id: Scalars['ID'];
};

export type CampaignSection = {
  __typename?: 'CampaignSection';
  active?: Maybe<Scalars['Boolean']>;
  buttonLink?: Maybe<Scalars['String']>;
  buttonText?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  markets?: Maybe<Array<Scalars['String']>>;
  tag?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CancelSubscription */
export type CancelSubscriptionPayload = {
  __typename?: 'CancelSubscriptionPayload';
  success: Scalars['Boolean'];
};

export type Challenge = {
  __typename?: 'Challenge';
  name: Scalars['String'];
};

export type ChallengeParticipant = {
  __typename?: 'ChallengeParticipant';
  accessUntil: Scalars['ISO8601DateTime'];
  challenge: Challenge;
};

export type ChallengePass = {
  __typename?: 'ChallengePass';
  challenge: Challenge;
  code?: Maybe<Scalars['String']>;
  days?: Maybe<Scalars['Int']>;
};

/** Autogenerated return type of ChangeEmailPreference */
export type ChangeEmailPreferencePayload = {
  __typename?: 'ChangeEmailPreferencePayload';
  errors?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
};

/** Autogenerated return type of ChangePassword */
export type ChangePasswordPayload = {
  __typename?: 'ChangePasswordPayload';
  user: User;
};

/** Autogenerated return type of ChangePreferences */
export type ChangePreferencesPayload = {
  __typename?: 'ChangePreferencesPayload';
  user: UserInterface;
};

/** Autogenerated return type of ChangeProductEmailPreference */
export type ChangeProductEmailPreferencePayload = {
  __typename?: 'ChangeProductEmailPreferencePayload';
  errors?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
};

/** Autogenerated return type of ChangeProfileData */
export type ChangeProfileDataPayload = {
  __typename?: 'ChangeProfileDataPayload';
  user: UserInterface;
};

/** Autogenerated return type of ChangeProfileInfo */
export type ChangeProfileInfoPayload = {
  __typename?: 'ChangeProfileInfoPayload';
  user: UserInterface;
};

/** Autogenerated return type of ChangeProfilePrivacy */
export type ChangeProfilePrivacyPayload = {
  __typename?: 'ChangeProfilePrivacyPayload';
  user: UserInterface;
};

/** Autogenerated return type of ClaimTrial */
export type ClaimTrialPayload = {
  __typename?: 'ClaimTrialPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  success: Scalars['Boolean'];
};

export enum ClassName {
  EmailPreference = 'EmailPreference',
  GenericProgram = 'GenericProgram',
  LiveEvent = 'LiveEvent'
}

export type Client = {
  __typename?: 'Client';
  active: Scalars['Boolean'];
  bundles: Array<Bundle>;
  id: Scalars['ID'];
  info?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  slug: Scalars['String'];
};

export enum Code {
  OneTimeCode = 'one_time_code',
  SubscriptionDiscountCode = 'subscription_discount_code',
  SubscriptionFullAccessCode = 'subscription_full_access_code',
  TrialCampaignCode = 'trial_campaign_code',
  TrialReferralCode = 'trial_referral_code'
}

export type CodeDetails = {
  __typename?: 'CodeDetails';
  provider?: Maybe<WellnessProviderKind>;
  type: PromotionCodeTypeKind;
};

export enum CodeSourceKind {
  App = 'app',
  Voucher = 'voucher'
}

export enum CodeStatusKind {
  Invalid = 'invalid',
  Mismatch = 'mismatch',
  Valid = 'valid'
}

export enum CodeTypeKind {
  AccessCode = 'access_code',
  AccessToken = 'access_token',
  ChallengePass = 'challenge_pass',
  DiscountCode = 'discount_code'
}

export type Comment = {
  __typename?: 'Comment';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  resourceClass?: Maybe<Scalars['String']>;
  resourceId: Scalars['ID'];
  userId: Scalars['ID'];
};

/** Autogenerated return type of CompleteProfile */
export type CompleteProfilePayload = {
  __typename?: 'CompleteProfilePayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<CurrentUser>;
};

/** Autogenerated return type of ConfirmEmail */
export type ConfirmEmailPayload = {
  __typename?: 'ConfirmEmailPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<CurrentUser>;
};

export type Content = {
  __typename?: 'Content';
  externalLede?: Maybe<Scalars['String']>;
  externalTitle?: Maybe<Scalars['String']>;
  internalLede?: Maybe<Scalars['String']>;
  internalTitle?: Maybe<Scalars['String']>;
  lede?: Maybe<Scalars['String']>;
};

export type ContentAnswer = {
  __typename?: 'ContentAnswer';
  key: Scalars['String'];
  value: Array<Scalars['String']>;
};

export type Course = {
  __typename?: 'Course';
  content: Content;
  externalImageUrl?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  legacy: Scalars['Boolean'];
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  themes?: Maybe<Array<ThemeKind>>;
  titleImageUrl?: Maybe<Scalars['String']>;
};

export type CourseAccess = {
  __typename?: 'CourseAccess';
  accessStatus: ProgramAccessStatus;
  accessUntil?: Maybe<Scalars['Int']>;
  course?: Maybe<Course>;
  courseProgress?: Maybe<Scalars['Int']>;
};

export type CoursesSection = {
  __typename?: 'CoursesSection';
  description?: Maybe<Scalars['String']>;
  group1ButtonLink?: Maybe<Scalars['String']>;
  group1ButtonText?: Maybe<Scalars['String']>;
  group1Description?: Maybe<Scalars['String']>;
  group1ImageUrl?: Maybe<Scalars['String']>;
  group1Title?: Maybe<Scalars['String']>;
  group2ButtonLink?: Maybe<Scalars['String']>;
  group2ButtonText?: Maybe<Scalars['String']>;
  group2Description?: Maybe<Scalars['String']>;
  group2ImageUrl?: Maybe<Scalars['String']>;
  group2Title?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateNewPassword */
export type CreateNewPasswordPayload = {
  __typename?: 'CreateNewPasswordPayload';
  success: Scalars['Boolean'];
};

export type CtaSection = {
  __typename?: 'CtaSection';
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export enum CurrencyKind {
  Eur = 'EUR',
  Sek = 'SEK'
}

export type CurrentUser = UserInterface & {
  __typename?: 'CurrentUser';
  accessToken?: Maybe<Scalars['String']>;
  accessUntil?: Maybe<Scalars['String']>;
  accountActivatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  address?: Maybe<Scalars['String']>;
  assets?: Maybe<Assets>;
  availableForTrial: Scalars['Boolean'];
  challengeParticipations: Array<Maybe<ChallengeParticipant>>;
  city?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['ISO8601DateTime']>;
  country?: Maybe<Scalars['String']>;
  courseAccesses: Array<Maybe<CourseAccess>>;
  dateOfBirth?: Maybe<Scalars['Int']>;
  eligibleForDelete?: Maybe<Scalars['Boolean']>;
  eligibleForStartDiscount?: Maybe<Scalars['Boolean']>;
  eligibleForTrial?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  emailLanguage?: Maybe<Scalars['String']>;
  extraPayments?: Maybe<Array<Maybe<ExtraPayment>>>;
  favorites?: Maybe<Favorites>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  group: Scalars['String'];
  hasWebPayments?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  interests?: Maybe<Array<Interest>>;
  isEmailActivated?: Maybe<Scalars['Boolean']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  kind?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  liveEventsAccess?: Maybe<Array<Maybe<LiveEventAccess>>>;
  locale?: Maybe<Scalars['String']>;
  nextBillingCycle?: Maybe<NextBillingCycle>;
  onboardingCompleted: Scalars['Boolean'];
  onboardingInterestsSkipped: Scalars['Boolean'];
  onboardingSkipped: Scalars['Boolean'];
  onboardingTopicsSkipped: Scalars['Boolean'];
  paymentFailedAt?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
  paymentTypeRenews?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  playlists: Array<Maybe<Playlist>>;
  preferences?: Maybe<Preferences>;
  previousEmail?: Maybe<Scalars['String']>;
  privacySettings?: Maybe<PrivacySettings>;
  profession?: Maybe<Scalars['String']>;
  profile?: Maybe<Profile>;
  programAccess: Array<Maybe<ProgramAccess>>;
  programs?: Maybe<Array<Maybe<Page>>>;
  provider: Provider;
  receipts: Array<Maybe<Payment>>;
  referralCode?: Maybe<Scalars['String']>;
  registrationDetail: RegistrationDetail;
  signUpPlatform?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  statistics?: Maybe<Statistics>;
  stories: Array<Story>;
  subscription: Subscription;
  topics?: Maybe<Array<Topic>>;
  trialPeriod?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
  videoNotes?: Maybe<VideoNote>;
  zipcode?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteAccount */
export type DeleteAccountPayload = {
  __typename?: 'DeleteAccountPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<UserInterface>;
};

/** Autogenerated return type of DeleteAvatar */
export type DeleteAvatarPayload = {
  __typename?: 'DeleteAvatarPayload';
  user?: Maybe<UserInterface>;
};

/** Autogenerated return type of DeleteFavoritePlaylist */
export type DeleteFavoritePlaylistPayload = {
  __typename?: 'DeleteFavoritePlaylistPayload';
  playlist?: Maybe<Playlist>;
};

/** Autogenerated return type of DeleteFavoriteVideo */
export type DeleteFavoriteVideoPayload = {
  __typename?: 'DeleteFavoriteVideoPayload';
  video?: Maybe<Video>;
};

/** Autogenerated return type of DeletePaymentMethod */
export type DeletePaymentMethodPayload = {
  __typename?: 'DeletePaymentMethodPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  success: Scalars['Boolean'];
};

/** Autogenerated return type of DeletePlaylist */
export type DeletePlaylistPayload = {
  __typename?: 'DeletePlaylistPayload';
  status?: Maybe<PlaylistStatus>;
};

export enum DevicePlatformKind {
  Android = 'android',
  Ios = 'ios',
  Web = 'web'
}

export type Discount = {
  __typename?: 'Discount';
  discountType: DiscountTypeKind;
  discountValue?: Maybe<Scalars['Int']>;
  discountedPrice?: Maybe<Scalars['Int']>;
  endDate?: Maybe<Scalars['ISO8601DateTime']>;
  identifier?: Maybe<PriceTypeKind>;
  startDate?: Maybe<Scalars['ISO8601DateTime']>;
};

export enum DiscountTypeKind {
  ByValue = 'by_value',
  Percentage = 'percentage'
}

export type Document = {
  __typename?: 'Document';
  contentType?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  url?: Maybe<Scalars['String']>;
};

export type Duration = {
  __typename?: 'Duration';
  unit?: Maybe<DurationUnitKind>;
  value?: Maybe<Scalars['Int']>;
};

export type DurationDisplay = {
  __typename?: 'DurationDisplay';
  unit?: Maybe<DurationDisplayUnitKind>;
  value?: Maybe<Scalars['Int']>;
};

export enum DurationDisplayUnitKind {
  DaysDisplay = 'days_display',
  PartsDisplay = 'parts_display',
  WeeksDisplay = 'weeks_display'
}

export enum DurationUnitKind {
  Days = 'days',
  Weeks = 'weeks'
}

export type Email = {
  __typename?: 'Email';
  email?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Error>>;
  exists?: Maybe<Scalars['Boolean']>;
};

export type EmailPreference = {
  __typename?: 'EmailPreference';
  description: Scalars['String'];
  id: Scalars['ID'];
  isMuted: Scalars['Boolean'];
  key: Scalars['String'];
  mutable: Scalars['Boolean'];
  name: Scalars['String'];
};

/** A user-readable error */
export type Error = {
  __typename?: 'Error';
  /** A description of the error */
  message?: Maybe<Scalars['String']>;
  /** Which input value this error came from, if error is validation error */
  path?: Maybe<Array<Scalars['String']>>;
};

export enum ErrorValue {
  /** Current access is longer than given from access token */
  AccessShorter = 'AccessShorter',
  /** New Access Until is missing */
  AccessUntilMissing = 'AccessUntilMissing',
  /** User already has active program access */
  AlreadyAccessed = 'AlreadyAccessed',
  /** Not allowed */
  AlreadyUsed = 'AlreadyUsed',
  /** Answers are invalid */
  AnswersInvalid = 'AnswersInvalid',
  /** Answers have not been saved */
  AnswersNotSaved = 'AnswersNotSaved',
  /** User does not have access to this program */
  NoAccess = 'NoAccess',
  /** No appropriate program */
  NoActiveProgram = 'NoActiveProgram',
  /** 403 Forbidden */
  NotAuthorized = 'NotAuthorized',
  /** Survey has not been marked as completed */
  NotCompleted = 'NotCompleted',
  /** 404 Not found */
  NotFound = 'NotFound',
  /** Program has not been unlocked */
  NotUnlocked = 'NotUnlocked',
  /** ProgramProgress not created successfully */
  ProgramProgressNotCreated = 'ProgramProgressNotCreated',
  /** Survey part has not been found */
  SurveyNotFound = 'SurveyNotFound',
  /** User is missing */
  UserMissing = 'UserMissing'
}

export type EventPropertyInput = {
  property?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of EventProxy */
export type EventProxyPayload = {
  __typename?: 'EventProxyPayload';
  errors?: Maybe<Array<Error>>;
};

export type ExtraPayment = {
  __typename?: 'ExtraPayment';
  amount?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  downloadUrl?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
  transact?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of Favorite */
export type FavoritePayload = {
  __typename?: 'FavoritePayload';
  errors?: Maybe<Array<Error>>;
};

export type Favorites = {
  __typename?: 'Favorites';
  blogPosts?: Maybe<Array<Maybe<BlogPost>>>;
  playlists: Array<Maybe<Scalars['ID']>>;
  videos: Array<Maybe<Scalars['ID']>>;
};

export type FeaturesSection = {
  __typename?: 'FeaturesSection';
  description?: Maybe<Scalars['String']>;
  featureBullets?: Maybe<Array<Scalars['String']>>;
  imageUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type FlipperFlag = {
  __typename?: 'FlipperFlag';
  name: Scalars['String'];
  value: Scalars['Boolean'];
};

export type FormFields = {
  __typename?: 'FormFields';
  accepturl: Scalars['String'];
  amount: Scalars['Int'];
  billingAddress?: Maybe<Scalars['String']>;
  billingFirstName?: Maybe<Scalars['String']>;
  callbackurl: Scalars['String'];
  currency: Scalars['String'];
  decorator?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  lang?: Maybe<Scalars['String']>;
  md5key?: Maybe<Scalars['String']>;
  merchant: Scalars['Int'];
  orderid: Scalars['String'];
  ordline0_0?: Maybe<Scalars['String']>;
  ordline0_1?: Maybe<Scalars['String']>;
  ordline1_0?: Maybe<Scalars['String']>;
  ordline1_1?: Maybe<Scalars['String']>;
  ordline2_0?: Maybe<Scalars['String']>;
  ordline2_1?: Maybe<Scalars['String']>;
  preauth?: Maybe<Scalars['Int']>;
  test?: Maybe<Scalars['Int']>;
};

export enum GenderKind {
  Female = 'Female',
  Male = 'Male',
  Other = 'Other'
}

export type GenericProgram = {
  __typename?: 'GenericProgram';
  accessPeriod: AccessPeriod;
  accessStatus: ProgramAccessStatus;
  category: ProgramCategory;
  description?: Maybe<Scalars['String']>;
  discount?: Maybe<Discount>;
  duration?: Maybe<Duration>;
  durationDisplay?: Maybe<DurationDisplay>;
  id: Scalars['ID'];
  instructors?: Maybe<Array<Maybe<Instructor>>>;
  kind: ProgramKind;
  language?: Maybe<LanguageKind>;
  markets?: Maybe<Array<LanguageKind>>;
  meta?: Maybe<ProgramMeta>;
  postSurvey?: Maybe<ProgramSurvey>;
  preSurvey?: Maybe<ProgramSurvey>;
  price?: Maybe<Price>;
  priceType?: Maybe<PriceTypeKind>;
  programAccess?: Maybe<ProgramAccess>;
  progress?: Maybe<Scalars['Float']>;
  promotionalImageUrl?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  publishedAt?: Maybe<Scalars['ISO8601DateTime']>;
  recomendation?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
  slug: Scalars['String'];
  summaryAsset?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  themes?: Maybe<Array<ThemeKind>>;
  title?: Maybe<Scalars['String']>;
  titleImageUrl?: Maybe<Scalars['String']>;
  trailer?: Maybe<Video>;
};

export type GenericProgramPayment = OrderPaymentInterface & {
  __typename?: 'GenericProgramPayment';
  amountCents: Scalars['Int'];
  amountCurrency: CurrencyKind;
  orderId: Scalars['String'];
  originalAmountCents?: Maybe<Scalars['Int']>;
  paymentProvider: PaymentProviderKind;
  program: GenericProgram;
  state: PaymentStatusKind;
  success: Scalars['Boolean'];
  voucher?: Maybe<Scalars['Boolean']>;
};

export enum GenericProgramSortAttribute {
  Alphabetical = 'alphabetical',
  Duration = 'duration',
  NewestFirst = 'newest_first'
}

export type GenericProgramWithCode = {
  __typename?: 'GenericProgramWithCode';
  code?: Maybe<Scalars['String']>;
  codeStatus?: Maybe<CodeStatusKind>;
  price?: Maybe<Price>;
};

export type GenresSection = {
  __typename?: 'GenresSection';
  description?: Maybe<Scalars['String']>;
  genre?: Maybe<Array<PageSection>>;
  title?: Maybe<Scalars['String']>;
};

export enum GlobalSearch {
  All = 'All',
  Blog = 'Blog',
  CourseTravel = 'CourseTravel',
  Live = 'Live',
  Play = 'Play',
  Resources = 'Resources'
}

export type HeroSection = {
  __typename?: 'HeroSection';
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  mobileImageUrl?: Maybe<Scalars['String']>;
  smallNote?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type Instructor = {
  __typename?: 'Instructor';
  assets?: Maybe<InstructorAssets>;
  blogDescription?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['ISO8601Date']>;
  description?: Maybe<Scalars['String']>;
  education?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  languages?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  philosophy?: Maybe<Scalars['String']>;
  quote?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  speciality?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  team?: Maybe<Scalars['String']>;
  titleImageUrl: Scalars['String'];
  videos?: Maybe<PagedVideos>;
  videosCount: Scalars['Int'];
  webpage?: Maybe<Scalars['String']>;
  youtubeId?: Maybe<Scalars['String']>;
};


export type InstructorVideosArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
};

export type InstructorAssets = {
  __typename?: 'InstructorAssets';
  externalImage?: Maybe<Scalars['String']>;
  squareImage?: Maybe<Scalars['String']>;
  titleImage?: Maybe<Scalars['String']>;
};

export type InstructorInGenre = {
  __typename?: 'InstructorInGenre';
  instructor?: Maybe<Instructor>;
  videosCountInGenres?: Maybe<Array<Maybe<VideosCountByGenre>>>;
};

export type Interest = {
  __typename?: 'Interest';
  hasContent: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['String'];
  slug: Scalars['String'];
};

export type Item = BlogPost | Document | GenericProgram | LiveEvent | Playlist | Video;

export enum ItemKind {
  Course = 'Course',
  GenericProgram = 'GenericProgram',
  LiveEvent = 'LiveEvent'
}

export enum ItemTypeKind {
  Bundle = 'Bundle'
}

export enum LanguageKind {
  En = 'en',
  Fi = 'fi',
  No = 'no',
  Se = 'se'
}

export type LinkToRecording = {
  __typename?: 'LinkToRecording';
  eventDate: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  link?: Maybe<Scalars['String']>;
};

export type LiveEvent = {
  __typename?: 'LiveEvent';
  accessories: Array<Scalars['String']>;
  availableSpots: Scalars['Int'];
  bookingAvailable: Scalars['Boolean'];
  descriptionLong: Scalars['String'];
  /** duration in minutes. Should step by 15 minutes, so 0, 15, 30, etc. */
  duration: Scalars['Int'];
  eventDates: Array<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  kind: LiveEventKind;
  language: LanguageKind;
  level: LiveEventLevel;
  linkToRecordings?: Maybe<Array<LinkToRecording>>;
  maximumParticipants: Scalars['Int'];
  otherInstructors: Array<Instructor>;
  price?: Maybe<Price>;
  primaryInstructor?: Maybe<Instructor>;
  publishedAt?: Maybe<Scalars['ISO8601DateTime']>;
  registrationEndDate: Scalars['ISO8601DateTime'];
  registrationStartDate: Scalars['ISO8601DateTime'];
  slug: Scalars['String'];
  status: LiveEventStatus;
  theme: Scalars['String'];
  thumbnail: Scalars['String'];
  title: Scalars['String'];
};

export type LiveEventAccess = {
  __typename?: 'LiveEventAccess';
  liveEvent?: Maybe<LiveEvent>;
  zoomLink: Scalars['String'];
  zoomPassword: Scalars['String'];
};

export type LiveEventCodes = {
  __typename?: 'LiveEventCodes';
  trial: Array<PromotionCode>;
  wellness: Array<PromotionCode>;
};

export enum LiveEventKind {
  Classe = 'classe',
  DonationClass = 'donation_class',
  FreeEvent = 'free_event',
  Lecture = 'lecture',
  PartOfOnlineCourse = 'part_of_online_course',
  Skills = 'skills',
  Talk = 'talk',
  Workshop = 'workshop'
}

export enum LiveEventLevel {
  Advanced = 'advanced',
  Beginner = 'beginner',
  Everyone = 'everyone',
  Intermediate = 'intermediate',
  Other = 'other'
}

export type LiveEventPayment = OrderPaymentInterface & {
  __typename?: 'LiveEventPayment';
  amountCents: Scalars['Int'];
  amountCurrency: CurrencyKind;
  live: LiveEvent;
  orderId: Scalars['String'];
  originalAmountCents?: Maybe<Scalars['Int']>;
  paymentProvider: PaymentProviderKind;
  state: PaymentStatusKind;
  success: Scalars['Boolean'];
};

export enum LiveEventSortAttribute {
  AmountCents = 'amount_cents',
  FirstEventDate = 'first_event_date'
}

export enum LiveEventStatus {
  Archived = 'archived',
  Canceled = 'canceled',
  Draft = 'draft',
  Published = 'published'
}

/** Autogenerated return type of Login */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  user?: Maybe<UserInterface>;
};

/** Autogenerated return type of Logout */
export type LogoutPayload = {
  __typename?: 'LogoutPayload';
  status?: Maybe<Scalars['String']>;
};

export type Meta = {
  __typename?: 'Meta';
  minutes?: Maybe<Scalars['Int']>;
  videoCount?: Maybe<Scalars['Int']>;
};

export type MetaSection = {
  __typename?: 'MetaSection';
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export enum MethodTypes {
  Code = 'code',
  Token = 'token'
}

export type MobileAppSection = {
  __typename?: 'MobileAppSection';
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export enum ModelNameKind {
  All = 'all',
  Blog = 'blog',
  BlogPosts = 'blog_posts',
  Challenges = 'challenges',
  CourseTravel = 'course_travel',
  Courses = 'courses',
  Events = 'events',
  GenericPrograms = 'generic_programs',
  Instructors = 'instructors',
  LandingPages = 'landing_pages',
  Live = 'live',
  LiveEvents = 'live_events',
  Play = 'play',
  Playlists = 'playlists',
  Resources = 'resources',
  Videos = 'videos'
}

export type MoodTracker = {
  __typename?: 'MoodTracker';
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  kind: MoodTrackerKind;
};

export enum MoodTrackerKind {
  Post = 'post',
  Pre = 'pre'
}

export type Mutation = {
  __typename?: 'Mutation';
  accessTokensActivate?: Maybe<ActivatePayload>;
  accessTokensValidate?: Maybe<ValidatePayload>;
  /** legacy registration access code activate */
  activateAccessCode?: Maybe<ActivateAccessCodePayload>;
  /** Activate bundle by access code */
  activateBundle?: Maybe<ActivateBundlePayload>;
  /** Activate challenge by access code */
  activateChallenge?: Maybe<ActivateChallengePayload>;
  /** Activate access code after checking it in availableSubscriptions query */
  activateFullAccessCode?: Maybe<ActivateFullAccessCodePayload>;
  /** Activate generic program if user has access */
  activateGenericProgram?: Maybe<ActivateGenericProgramPayload>;
  activateLegacyPausaSmart?: Maybe<ActivateLegacyPausaSmartPayload>;
  activateLiveEvent?: Maybe<ActivateLiveEventPayload>;
  /** Activate one time code after checking it in availableSubscriptions query */
  activateOneTimeCode?: Maybe<ActivateOneTimeCodePayload>;
  activatePausaSmart?: Maybe<ActivatePausaSmartPayload>;
  /** Set trial days to extend the access_until, but do not extend yet */
  activateTrialExtension?: Maybe<ActivateTrialExtensionPayload>;
  addAdyenPaymentMethod?: Maybe<AddAdyenPaymentMethodPayload>;
  addComment?: Maybe<AddCommentPayload>;
  addFavoritePlaylist?: Maybe<AddFavoritePlaylistPayload>;
  addFavoriteVideo?: Maybe<AddFavoriteVideoPayload>;
  addMoodTrackerAnswer?: Maybe<AddMoodTrackerAnswerPayload>;
  addPlaylist?: Maybe<AddPlaylistPayload>;
  addSearchResult?: Maybe<AddSearchResultPayload>;
  addStory?: Maybe<AddStoryPayload>;
  addTrustlyPaymentMethod?: Maybe<AddTrustlyPaymentMethodPayload>;
  addUserFeedback?: Maybe<AddUserFeedbackPayload>;
  addUserSchedule?: Maybe<AddUserSchedulePayload>;
  addVideoToPlaylist?: Maybe<AddVideoToPlaylistPayload>;
  addWaitingItem?: Maybe<AddWaitingItemPayload>;
  answerSurvey?: Maybe<AnswerSurveyPayload>;
  assignMobileDevice?: Maybe<AssignMobileDevicePayload>;
  assignPlanToTrial?: Maybe<AssignPlanToTrialPayload>;
  authenticateUser?: Maybe<AuthenticateUserPayload>;
  cancelSubscription?: Maybe<CancelSubscriptionPayload>;
  changeEmailPreference?: Maybe<ChangeEmailPreferencePayload>;
  changePassword?: Maybe<ChangePasswordPayload>;
  changePreferences?: Maybe<ChangePreferencesPayload>;
  changeProductEmailPreference?: Maybe<ChangeProductEmailPreferencePayload>;
  changeProfileData?: Maybe<ChangeProfileDataPayload>;
  changeProfileInfo?: Maybe<ChangeProfileInfoPayload>;
  changeProfilePrivacy?: Maybe<ChangeProfilePrivacyPayload>;
  claimTrial?: Maybe<ClaimTrialPayload>;
  completeProfile?: Maybe<CompleteProfilePayload>;
  /** Confirms email and extends current user access_until (whatever it is) by default 14 days given during registration or by trialPeriod set previously in activateTrialExtension mutation */
  confirmEmail?: Maybe<ConfirmEmailPayload>;
  createNewPassword?: Maybe<CreateNewPasswordPayload>;
  deleteAccount?: Maybe<DeleteAccountPayload>;
  deleteAvatar?: Maybe<DeleteAvatarPayload>;
  deleteFavoritePlaylist?: Maybe<DeleteFavoritePlaylistPayload>;
  deleteFavoriteVideo?: Maybe<DeleteFavoriteVideoPayload>;
  deletePaymentMethod?: Maybe<DeletePaymentMethodPayload>;
  deletePlaylist?: Maybe<DeletePlaylistPayload>;
  eventProxy?: Maybe<EventProxyPayload>;
  login?: Maybe<LoginPayload>;
  logout?: Maybe<LogoutPayload>;
  participateInAnEvent?: Maybe<ParticipateInAnEventPayload>;
  patchPlaylist?: Maybe<PatchPlaylistPayload>;
  patchStory?: Maybe<PatchStoryPayload>;
  patchUser?: Maybe<ChangePreferencesPayload>;
  payForItem?: Maybe<PayForItemPayload>;
  payForVoucher?: Maybe<PayForVoucherPayload>;
  paymentsStoreAdyenDropin?: Maybe<StoreAdyenDropinPayload>;
  paymentsStorePaymentDetails?: Maybe<StorePaymentDetailsPayload>;
  paymentsStoreTrustly?: Maybe<StoreTrustlyPayload>;
  removeVideoFromPlaylist?: Maybe<RemoveVideoFromPlaylistPayload>;
  resendConfirmationEmail?: Maybe<ResendConfirmationEmailPayload>;
  resetEmailConfirmation?: Maybe<ResetEmailConfirmationPayload>;
  resetPassword?: Maybe<ResetPasswordPayload>;
  resetSummerCampaign?: Maybe<ResetSummerCampaignPayload>;
  /** Restore the subscription foruser that has another Yogobe account on his mobile account (appstore/playstore) */
  restoreMobileSubscription?: Maybe<RestoreMobileSubscriptionPayload>;
  saveOnboardingChoices?: Maybe<SaveOnboardingChoicesPayload>;
  savePhasedProgramProgress?: Maybe<SavePhasedProgramProgressPayload>;
  saveProgramProgress?: Maybe<SaveProgramProgressPayload>;
  signUp?: Maybe<RegistrationPayload>;
  signUpV2?: Maybe<RegistrationV2Payload>;
  socialSignIn?: Maybe<SignInPayload>;
  socialSignUp?: Maybe<SignUpPayload>;
  storeTransactionId?: Maybe<StoreTransactionIdPayload>;
  storeUserDecision?: Maybe<StoreUserDecisionPayload>;
  submitInterestForm?: Maybe<SubmitInterestFormPayload>;
  updatePaymentMethodSettings?: Maybe<UpdatePaymentMethodSettingsPayload>;
  /** Validate challenge access code */
  validateChallengeToken?: Maybe<ValidateTokenPayload>;
  validateProgramCode?: Maybe<ValidateProgramCodePayload>;
  videoFavorite?: Maybe<FavoritePayload>;
  videoWatch?: Maybe<WatchPayload>;
  videoWatchCompleted?: Maybe<WatchCompletedPayload>;
};


export type MutationAccessTokensActivateArgs = {
  accessToken: Scalars['String'];
};


export type MutationAccessTokensValidateArgs = {
  accessToken: Scalars['String'];
};


export type MutationActivateAccessCodeArgs = {
  accessCode: Scalars['String'];
  userId: Scalars['ID'];
};


export type MutationActivateBundleArgs = {
  client: Scalars['String'];
  code?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
};


export type MutationActivateChallengeArgs = {
  accessCode?: InputMaybe<Scalars['String']>;
  challenge?: InputMaybe<Scalars['String']>;
};


export type MutationActivateFullAccessCodeArgs = {
  code: Scalars['String'];
  promotionName: Scalars['String'];
};


export type MutationActivateGenericProgramArgs = {
  accessCode?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
};


export type MutationActivateLegacyPausaSmartArgs = {
  accessCode: Scalars['String'];
  email: Scalars['String'];
  fullName: Scalars['String'];
};


export type MutationActivateLiveEventArgs = {
  code: Scalars['String'];
  slug: Scalars['String'];
};


export type MutationActivateOneTimeCodeArgs = {
  code: Scalars['String'];
  promotionName: Scalars['String'];
};


export type MutationActivateTrialExtensionArgs = {
  code: Scalars['String'];
  platform: DevicePlatformKind;
  promotionName: Scalars['String'];
};


export type MutationAddAdyenPaymentMethodArgs = {
  browserInfo?: InputMaybe<BrowserInfoInput>;
  paymentMethod: PaymentMethodInput;
  redirectToFailed?: InputMaybe<Scalars['String']>;
  redirectToSuccess?: InputMaybe<Scalars['String']>;
  riskData?: InputMaybe<RiskDataInput>;
};


export type MutationAddCommentArgs = {
  description: Scalars['String'];
  resourceClass?: InputMaybe<Scalars['String']>;
  resourceId: Scalars['ID'];
};


export type MutationAddFavoritePlaylistArgs = {
  playlistId: Scalars['ID'];
};


export type MutationAddFavoriteVideoArgs = {
  videoId: Scalars['ID'];
};


export type MutationAddMoodTrackerAnswerArgs = {
  answer1: Scalars['Int'];
  answer2: Scalars['Int'];
  answer3: Scalars['Int'];
  answer4: Scalars['Int'];
  kind: SurveyKind;
  moodTrackerId: Scalars['ID'];
};


export type MutationAddPlaylistArgs = {
  description?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['ISO8601DateTime']>;
  publishedState?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  videos?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  visibility?: InputMaybe<Scalars['String']>;
};


export type MutationAddSearchResultArgs = {
  documentId: Scalars['String'];
  modelType: ModelNameKind;
  query: Scalars['String'];
};


export type MutationAddStoryArgs = {
  resourceClass?: InputMaybe<Scalars['String']>;
  resourceId: Scalars['ID'];
};


export type MutationAddTrustlyPaymentMethodArgs = {
  redirectTo?: InputMaybe<Scalars['String']>;
};


export type MutationAddUserFeedbackArgs = {
  bugs?: InputMaybe<Scalars['String']>;
  message: Scalars['String'];
  rating?: InputMaybe<Scalars['Int']>;
  url: Scalars['String'];
};


export type MutationAddUserScheduleArgs = {
  datetime: Scalars['ISO8601DateTime'];
  resourceId: Scalars['ID'];
  returnFormat: Scalars['String'];
};


export type MutationAddVideoToPlaylistArgs = {
  playlistId: Scalars['ID'];
  videoId: Scalars['ID'];
};


export type MutationAddWaitingItemArgs = {
  itemId: Scalars['ID'];
  itemType: ItemTypeKind;
};


export type MutationAnswerSurveyArgs = {
  answers?: InputMaybe<Array<AnswerInput>>;
  surveyAction: ActionInput;
  surveyAnswerId?: InputMaybe<Scalars['ID']>;
  surveyPartId: Scalars['ID'];
};


export type MutationAssignMobileDeviceArgs = {
  appLabel?: InputMaybe<Scalars['String']>;
  appVersion?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
  token: Scalars['String'];
};


export type MutationAssignPlanToTrialArgs = {
  planType: PlanTypeKind;
};


export type MutationAuthenticateUserArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationChangeEmailPreferenceArgs = {
  email?: InputMaybe<Scalars['String']>;
  key: Scalars['String'];
  mute: Scalars['Boolean'];
  token?: InputMaybe<Scalars['String']>;
};


export type MutationChangePasswordArgs = {
  password: Scalars['String'];
};


export type MutationChangePreferencesArgs = {
  contentLanguages?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  excludeTerms?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  videoLevels?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type MutationChangeProductEmailPreferenceArgs = {
  email?: InputMaybe<Scalars['String']>;
  key: Scalars['String'];
  mute: Scalars['Boolean'];
  productName: ClassName;
  token?: InputMaybe<Scalars['String']>;
};


export type MutationChangeProfileDataArgs = {
  avatar?: InputMaybe<Scalars['Upload']>;
  displayName?: InputMaybe<Scalars['String']>;
  facebookUrl?: InputMaybe<Scalars['String']>;
  instagramUrl?: InputMaybe<Scalars['String']>;
  linkedinUrl?: InputMaybe<Scalars['String']>;
  shortBio?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
};


export type MutationChangeProfileInfoArgs = {
  address?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  dateOfBirth?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  profession?: InputMaybe<Scalars['String']>;
  zipcode?: InputMaybe<Scalars['String']>;
};


export type MutationChangeProfilePrivacyArgs = {
  isPrivateFavorites?: InputMaybe<Scalars['Boolean']>;
  isPrivateProfile?: InputMaybe<Scalars['Boolean']>;
  isPrivateStats?: InputMaybe<Scalars['Boolean']>;
};


export type MutationCompleteProfileArgs = {
  address?: InputMaybe<Scalars['String']>;
  campaign?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  countryCode?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<GenderKind>;
  oneTimeCode?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
  postalCode?: InputMaybe<Scalars['String']>;
  trialExtensionCode?: InputMaybe<Scalars['String']>;
};


export type MutationConfirmEmailArgs = {
  token: Scalars['String'];
};


export type MutationCreateNewPasswordArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  passwordToken: Scalars['String'];
};


export type MutationDeleteAccountArgs = {
  deletionReason: Scalars['String'];
};


export type MutationDeleteFavoritePlaylistArgs = {
  playlistId: Scalars['ID'];
};


export type MutationDeleteFavoriteVideoArgs = {
  videoId: Scalars['ID'];
};


export type MutationDeletePaymentMethodArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePlaylistArgs = {
  id: Scalars['ID'];
};


export type MutationEventProxyArgs = {
  event: ProxyEventKind;
  properties?: InputMaybe<Array<EventPropertyInput>>;
};


export type MutationLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationParticipateInAnEventArgs = {
  slug: Scalars['String'];
};


export type MutationPatchPlaylistArgs = {
  description?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  title?: InputMaybe<Scalars['String']>;
  videos?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  visibility?: InputMaybe<Scalars['String']>;
};


export type MutationPatchStoryArgs = {
  id: Scalars['ID'];
  progress: Scalars['Int'];
  resourceClass?: InputMaybe<Scalars['String']>;
  resourceId: Scalars['ID'];
};


export type MutationPatchUserArgs = {
  contentLanguages?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  excludeTerms?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  videoLevels?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type MutationPayForItemArgs = {
  browserInfo?: InputMaybe<BrowserInfoInput>;
  discountCode?: InputMaybe<Scalars['String']>;
  itemKind: ItemKind;
  paymentMethod: PaymentMethodInput;
  paymentMethodId?: InputMaybe<Scalars['String']>;
  redirectToFailed?: InputMaybe<Scalars['String']>;
  redirectToSuccess?: InputMaybe<Scalars['String']>;
  riskData?: InputMaybe<RiskDataInput>;
  slug: Scalars['String'];
};


export type MutationPayForVoucherArgs = {
  browserInfo?: InputMaybe<BrowserInfoInput>;
  customMessage?: InputMaybe<Scalars['String']>;
  discountCode?: InputMaybe<Scalars['String']>;
  itemKind: ItemKind;
  paymentMethod: PaymentMethodInput;
  paymentMethodId?: InputMaybe<Scalars['String']>;
  recipientEmail: Scalars['String'];
  recipientName: Scalars['String'];
  redirectToFailed?: InputMaybe<Scalars['String']>;
  redirectToSuccess?: InputMaybe<Scalars['String']>;
  riskData?: InputMaybe<RiskDataInput>;
  sendGiftEmail: Scalars['Boolean'];
  senderName: Scalars['String'];
  slug: Scalars['String'];
};


export type MutationPaymentsStoreAdyenDropinArgs = {
  browserInfo?: InputMaybe<BrowserInfoInput>;
  paymentMethod: PaymentMethodInput;
  paymentMethodId?: InputMaybe<Scalars['String']>;
  paymentType: Scalars['String'];
  redirectTo?: InputMaybe<Scalars['String']>;
  riskData?: InputMaybe<RiskDataInput>;
};


export type MutationPaymentsStorePaymentDetailsArgs = {
  detailsMd?: InputMaybe<Scalars['String']>;
  detailsPaRes?: InputMaybe<Scalars['String']>;
  detailsReturnUrlQueryString?: InputMaybe<Scalars['String']>;
  orderId: Scalars['String'];
  paymentData?: InputMaybe<Scalars['String']>;
  threeds2ChallengeResult?: InputMaybe<Scalars['String']>;
  threeds2Fingerprint?: InputMaybe<Scalars['String']>;
};


export type MutationPaymentsStoreTrustlyArgs = {
  paymentMethodId?: InputMaybe<Scalars['String']>;
  paymentType: Scalars['String'];
  redirectTo?: InputMaybe<Scalars['String']>;
};


export type MutationRemoveVideoFromPlaylistArgs = {
  playlistId: Scalars['ID'];
  videoId: Scalars['ID'];
};


export type MutationResendConfirmationEmailArgs = {
  email: Scalars['String'];
};


export type MutationResetEmailConfirmationArgs = {
  token: Scalars['String'];
};


export type MutationResetPasswordArgs = {
  email: Scalars['String'];
};


export type MutationResetSummerCampaignArgs = {
  programId: Scalars['ID'];
};


export type MutationRestoreMobileSubscriptionArgs = {
  platform: DevicePlatformKind;
  purchaseIdentifier?: InputMaybe<Scalars['String']>;
};


export type MutationSaveOnboardingChoicesArgs = {
  interestSlugs?: InputMaybe<Array<Scalars['String']>>;
  topicSlugs?: InputMaybe<Array<Scalars['String']>>;
};


export type MutationSavePhasedProgramProgressArgs = {
  documentPartId?: InputMaybe<Scalars['ID']>;
  programPartElementId?: InputMaybe<Scalars['ID']>;
  videoPartId?: InputMaybe<Scalars['ID']>;
};


export type MutationSaveProgramProgressArgs = {
  programId: Scalars['ID'];
};


export type MutationSignUpArgs = {
  address: Scalars['String'];
  campaign?: InputMaybe<Scalars['String']>;
  campaignCode?: InputMaybe<Scalars['String']>;
  city: Scalars['String'];
  country?: InputMaybe<Scalars['String']>;
  countryCode?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  gender?: InputMaybe<GenderKind>;
  lastName: Scalars['String'];
  oneTimeCode?: InputMaybe<Scalars['String']>;
  password: Scalars['String'];
  paymentType?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
  postalCode: Scalars['String'];
  redirectTo?: InputMaybe<Scalars['String']>;
  trialExtensionCode?: InputMaybe<Scalars['String']>;
  utmCampaign?: InputMaybe<Scalars['String']>;
  utmMedium?: InputMaybe<Scalars['String']>;
  utmSource?: InputMaybe<Scalars['String']>;
};


export type MutationSignUpV2Args = {
  campaign?: InputMaybe<Scalars['String']>;
  campaignCode?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  countryCode?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName?: InputMaybe<Scalars['String']>;
  password: Scalars['String'];
  paymentType?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
  redirectTo?: InputMaybe<Scalars['String']>;
  registrationSource?: InputMaybe<RegistrationSourceKind>;
  registrationSourceId?: InputMaybe<Scalars['String']>;
  utmCampaign?: InputMaybe<Scalars['String']>;
  utmMedium?: InputMaybe<Scalars['String']>;
  utmSource?: InputMaybe<Scalars['String']>;
};


export type MutationSocialSignInArgs = {
  accessToken?: InputMaybe<Scalars['String']>;
  code?: InputMaybe<Scalars['String']>;
  identityToken?: InputMaybe<Scalars['String']>;
  method: MethodTypes;
  platform: DevicePlatformKind;
  provider: ProviderTypes;
};


export type MutationSocialSignUpArgs = {
  accessToken?: InputMaybe<Scalars['String']>;
  avatarFromUrl?: InputMaybe<Scalars['String']>;
  campaignCode?: InputMaybe<Scalars['String']>;
  code?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  identityToken?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  method: MethodTypes;
  paymentType?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
  provider: ProviderTypes;
  redirectTo?: InputMaybe<Scalars['String']>;
  registrationSource?: InputMaybe<RegistrationSourceKind>;
  registrationSourceId?: InputMaybe<Scalars['String']>;
  utmCampaign?: InputMaybe<Scalars['String']>;
  utmMedium?: InputMaybe<Scalars['String']>;
  utmSource?: InputMaybe<Scalars['String']>;
};


export type MutationStoreTransactionIdArgs = {
  transactionId: Scalars['String'];
};


export type MutationStoreUserDecisionArgs = {
  decision: UserDecisionKind;
  value?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSubmitInterestFormArgs = {
  comment?: InputMaybe<Scalars['String']>;
  companyName?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  fullName: Scalars['String'];
  page: Scalars['String'];
};


export type MutationUpdatePaymentMethodSettingsArgs = {
  id: Scalars['ID'];
  setAsDefault?: InputMaybe<Scalars['Boolean']>;
  setAsFallback?: InputMaybe<Scalars['Boolean']>;
};


export type MutationValidateChallengeTokenArgs = {
  accessToken: Scalars['String'];
};


export type MutationValidateProgramCodeArgs = {
  code?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
};


export type MutationVideoFavoriteArgs = {
  videoId: Scalars['String'];
};


export type MutationVideoWatchArgs = {
  cursorAt: Scalars['Int'];
  seconds: Scalars['Int'];
  videoId: Scalars['String'];
};


export type MutationVideoWatchCompletedArgs = {
  cursorAt: Scalars['Int'];
  seconds: Scalars['Int'];
  videoId: Scalars['String'];
};

export type Need = {
  __typename?: 'Need';
  imageUrl: Scalars['String'];
  index: Scalars['Int'];
  name: Scalars['String'];
  settings: Scalars['JSON'];
  slug: Scalars['String'];
};

export type NextBillingCycle = {
  __typename?: 'NextBillingCycle';
  amount?: Maybe<Scalars['String']>;
  billingDate?: Maybe<Scalars['ISO8601Date']>;
  paymentStatus?: Maybe<PaymentStatusKind>;
  planName?: Maybe<Scalars['String']>;
};

export type OnboardingChoices = {
  __typename?: 'OnboardingChoices';
  interests: Array<Interest>;
  topics: Array<Topic>;
};

export enum Option {
  All = 'all',
  CourseInstructorsOnly = 'course_instructors_only',
  HealthcareInstructorsOnly = 'healthcare_instructors_only',
  LiveEventsInstructorsOnly = 'live_events_instructors_only',
  ProgramInstructorsOnly = 'program_instructors_only'
}

export type Options = {
  __typename?: 'Options';
  professionLabels?: Maybe<Array<Scalars['String']>>;
  professions?: Maybe<Array<Scalars['String']>>;
};

export type Order = AddPayment | GenericProgramPayment | LiveEventPayment | SubscriptionPayment;

export type OrderPaymentInterface = {
  amountCents: Scalars['Int'];
  amountCurrency: CurrencyKind;
  orderId: Scalars['String'];
  originalAmountCents?: Maybe<Scalars['Int']>;
  paymentProvider: PaymentProviderKind;
  state: PaymentStatusKind;
  success: Scalars['Boolean'];
};

export type OtherFeaturesSection = {
  __typename?: 'OtherFeaturesSection';
  description?: Maybe<Scalars['String']>;
  otherFeatures?: Maybe<Array<PageSection>>;
  title?: Maybe<Scalars['String']>;
};

export enum OtherTypeKind {
  Challenges = 'challenges',
  Live = 'live',
  Playlists = 'playlists',
  Programs = 'programs',
  Videos = 'videos'
}

export type OverviewPlaylist = {
  __typename?: 'OverviewPlaylist';
  name: Scalars['String'];
  playlistId: Scalars['ID'];
  term: Scalars['String'];
};

export type Page = {
  __typename?: 'Page';
  assets?: Maybe<PageAssets>;
  blogPosts?: Maybe<Array<Maybe<BlogPost>>>;
  content?: Maybe<PageContent>;
  externalLede?: Maybe<Scalars['String']>;
  externalTitle?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  internalLede?: Maybe<Scalars['String']>;
  internalTitle?: Maybe<Scalars['String']>;
  kind: Scalars['String'];
  name: Scalars['String'];
  path: Scalars['String'];
  playlists?: Maybe<Array<Maybe<Playlist>>>;
  programs?: Maybe<Array<Maybe<Page>>>;
  programsDetails?: Maybe<Array<Maybe<ProgramsDetails>>>;
  slug: Scalars['String'];
  taxonomies?: Maybe<TaxonomyForLandingPage>;
  testimonials?: Maybe<Array<Maybe<Testimonial>>>;
  trailerVideo?: Maybe<Video>;
  utmCampaign?: Maybe<Scalars['String']>;
  videos?: Maybe<Array<Maybe<Video>>>;
};

export type PageAssets = {
  __typename?: 'PageAssets';
  externalImage: Scalars['String'];
  internalImage: Scalars['String'];
  ledeVideos?: Maybe<Array<Maybe<Video>>>;
  titleImage: Scalars['String'];
  titleVideo?: Maybe<Video>;
};

export type PageContent = {
  __typename?: 'PageContent';
  body?: Maybe<Scalars['String']>;
  body1?: Maybe<Scalars['String']>;
  body2?: Maybe<Scalars['String']>;
  body3?: Maybe<Scalars['String']>;
  body4?: Maybe<Scalars['String']>;
  body5?: Maybe<Scalars['String']>;
  body6?: Maybe<Scalars['String']>;
  englishTitle?: Maybe<Scalars['String']>;
  externalLede?: Maybe<Scalars['String']>;
  externalTitle?: Maybe<Scalars['String']>;
  extraImages?: Maybe<Scalars['String']>;
  internalLede?: Maybe<Scalars['String']>;
  internalTitle?: Maybe<Scalars['String']>;
  lede?: Maybe<Scalars['String']>;
  localLanguageTitle?: Maybe<Scalars['String']>;
  sanskritTitle?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
};

export type PageSection = {
  __typename?: 'PageSection';
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  otherType?: Maybe<OtherTypeKind>;
  sectionType?: Maybe<Scalars['String']>;
  slug?: Maybe<SlugTypeKind>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type PagedBlogPosts = PagedInterface & {
  __typename?: 'PagedBlogPosts';
  data: Array<BlogPost>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedBundles = PagedInterface & {
  __typename?: 'PagedBundles';
  data: Array<Bundle>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedGenericPrograms = PagedInterface & {
  __typename?: 'PagedGenericPrograms';
  data: Array<GenericProgram>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedInstructors = PagedInterface & {
  __typename?: 'PagedInstructors';
  data: Array<Instructor>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedInterface = {
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedLiveEvents = PagedInterface & {
  __typename?: 'PagedLiveEvents';
  availableKinds: Array<LiveEventKind>;
  data: Array<LiveEvent>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedPages = PagedInterface & {
  __typename?: 'PagedPages';
  data: Array<Page>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedPlaylists = PagedInterface & {
  __typename?: 'PagedPlaylists';
  data: Array<Playlist>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedSurveys = PagedInterface & {
  __typename?: 'PagedSurveys';
  data: Array<Survey>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedUsers = PagedInterface & {
  __typename?: 'PagedUsers';
  data: Array<UserInterface>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

export type PagedVideos = PagedInterface & {
  __typename?: 'PagedVideos';
  data: Array<Video>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  totalCount: Scalars['Int'];
};

/** Autogenerated return type of ParticipateInAnEvent */
export type ParticipateInAnEventPayload = {
  __typename?: 'ParticipateInAnEventPayload';
  amountCents?: Maybe<Scalars['Int']>;
  amountCurrency?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Error>>;
  liveEvent?: Maybe<LiveEvent>;
  message?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
  user?: Maybe<CurrentUser>;
};

/** Autogenerated return type of PatchPlaylist */
export type PatchPlaylistPayload = {
  __typename?: 'PatchPlaylistPayload';
  playlist?: Maybe<Playlist>;
};

/** Autogenerated return type of PatchStory */
export type PatchStoryPayload = {
  __typename?: 'PatchStoryPayload';
  story?: Maybe<Story>;
};

/** Autogenerated return type of PayForItem */
export type PayForItemPayload = {
  __typename?: 'PayForItemPayload';
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']>;
  resultAction?: Maybe<AdyenAction>;
  resultCode?: Maybe<PaymentResultCodeKind>;
  transaction?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of PayForVoucher */
export type PayForVoucherPayload = {
  __typename?: 'PayForVoucherPayload';
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']>;
  resultAction?: Maybe<AdyenAction>;
  resultCode?: Maybe<PaymentResultCodeKind>;
  transaction?: Maybe<Scalars['String']>;
};

export type Payment = {
  __typename?: 'Payment';
  amount: Scalars['String'];
  currency: Scalars['String'];
  date: Scalars['String'];
  downloadUrl?: Maybe<Scalars['String']>;
  mobilePayment: Scalars['Boolean'];
  months: Scalars['Int'];
  number: Scalars['String'];
  paymentProvider: Scalars['String'];
  paymentType: Scalars['String'];
  transact?: Maybe<Scalars['String']>;
};

export type PaymentMethod = {
  __typename?: 'PaymentMethod';
  expiryMonth?: Maybe<Scalars['String']>;
  expiryYear?: Maybe<Scalars['String']>;
  fallback?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isDefault?: Maybe<Scalars['Boolean']>;
  lastFour: Scalars['String'];
  name: Scalars['String'];
  provider?: Maybe<ProviderKind>;
  status?: Maybe<PaymentMethodStatusKind>;
  variant?: Maybe<Scalars['String']>;
};

export type PaymentMethodInput = {
  brand?: InputMaybe<Scalars['String']>;
  encryptedCardNumber?: InputMaybe<Scalars['String']>;
  encryptedExpiryMonth?: InputMaybe<Scalars['String']>;
  encryptedExpiryYear?: InputMaybe<Scalars['String']>;
  encryptedSecurityCode?: InputMaybe<Scalars['String']>;
  holderName?: InputMaybe<Scalars['String']>;
  providerType?: InputMaybe<Scalars['String']>;
};

export enum PaymentMethodStatusKind {
  Active = 'active',
  Expired = 'expired',
  Expiring = 'expiring'
}

export enum PaymentProviderKind {
  Adyen = 'adyen',
  AdyenDibs = 'adyen_dibs',
  Apple = 'apple',
  Free = 'free',
  Google = 'google',
  Trustly = 'trustly',
  Wellness = 'wellness'
}

export type PaymentResponse = {
  __typename?: 'PaymentResponse';
  formFields?: Maybe<FormFields>;
  url: Scalars['String'];
};

export enum PaymentResultCodeKind {
  Authorised = 'authorised',
  Pending = 'pending',
  Redirect = 'redirect',
  Refused = 'refused'
}

export enum PaymentStatusKind {
  Archived = 'archived',
  Authorized = 'authorized',
  Done = 'done',
  Draft = 'draft',
  Failed = 'failed',
  Pending = 'pending',
  Processed = 'processed',
  Refunded = 'refunded',
  Rejected = 'rejected',
  Timeout = 'timeout'
}

export type PhasedProgram = {
  __typename?: 'PhasedProgram';
  id: Scalars['ID'];
  intro?: Maybe<SpecialSection>;
  outro?: Maybe<SpecialSection>;
  phases?: Maybe<Array<Maybe<ProgramPhase>>>;
  slug: Scalars['String'];
};

export enum PlanTypeKind {
  FreePlan = 'free_plan',
  Monthly = 'monthly',
  Quarterly = 'quarterly',
  Wellness = 'wellness',
  Yearly = 'yearly'
}

export type PlayOverview = {
  __typename?: 'PlayOverview';
  challenges?: Maybe<Array<GenericProgram>>;
  liveEvents?: Maybe<Array<LiveEvent>>;
  needs?: Maybe<Array<Need>>;
  playlists?: Maybe<Array<Playlist>>;
  programs?: Maybe<Array<GenericProgram>>;
  videoSettings: Scalars['JSON'];
  videos?: Maybe<Array<Video>>;
};

export type Playlist = {
  __typename?: 'Playlist';
  assets?: Maybe<PlaylistAssets>;
  description?: Maybe<Scalars['String']>;
  favorited?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  identifier?: Maybe<Scalars['String']>;
  languages?: Maybe<Array<Scalars['String']>>;
  meta?: Maybe<Meta>;
  owner?: Maybe<UserInterface>;
  public?: Maybe<Scalars['Boolean']>;
  publishedState: Scalars['String'];
  removedText: Scalars['String'];
  thumbnailUrl?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  userName?: Maybe<Scalars['String']>;
  videos?: Maybe<Array<Maybe<Video>>>;
  visibility?: Maybe<Scalars['String']>;
};

export type PlaylistAssets = {
  __typename?: 'PlaylistAssets';
  thumbnailUrl?: Maybe<Scalars['String']>;
};

export enum PlaylistSortAttribute {
  Alphabetical = 'alphabetical',
  NewestFirst = 'newest_first'
}

export type PlaylistStatus = {
  __typename?: 'PlaylistStatus';
  destroyed?: Maybe<Scalars['Boolean']>;
};

export type Preferences = {
  __typename?: 'Preferences';
  contentLanguages?: Maybe<Array<Maybe<Scalars['String']>>>;
  excludeTerms?: Maybe<Array<Maybe<Scalars['String']>>>;
  preferTerms?: Maybe<Array<Maybe<Scalars['String']>>>;
  searchFilters?: Maybe<Array<Maybe<Scalars['String']>>>;
  videoLevels?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Price = {
  __typename?: 'Price';
  currency?: Maybe<Scalars['String']>;
  discountApplied: Scalars['Boolean'];
  discountedPrice?: Maybe<Scalars['Int']>;
  originalPrice?: Maybe<Scalars['Int']>;
};

export enum PriceTypeKind {
  AccessCodesOnly = 'access_codes_only',
  BySubscription = 'by_subscription',
  DiscountForAll = 'discount_for_all',
  DiscountForPaying = 'discount_for_paying',
  FreeForAll = 'free_for_all',
  FreeForPaying = 'free_for_paying',
  RegularPrice = 'regular_price'
}

export type PrivacySettings = {
  __typename?: 'PrivacySettings';
  isPrivateFavorites?: Maybe<Scalars['Boolean']>;
  isPrivateHistory?: Maybe<Scalars['Boolean']>;
  isPrivatePlaylists?: Maybe<Scalars['Boolean']>;
  isPrivateProfile?: Maybe<Scalars['Boolean']>;
  isPrivateStats?: Maybe<Scalars['Boolean']>;
};

/** The usual errors like 404, 403 etc. */
export type ProcessingError = {
  __typename?: 'ProcessingError';
  /** A description of the error */
  message?: Maybe<Scalars['String']>;
  /** The error class */
  status?: Maybe<ErrorValue>;
};

export type Profile = {
  __typename?: 'Profile';
  displayName?: Maybe<Scalars['String']>;
  facebookURL?: Maybe<Scalars['String']>;
  instagramURL?: Maybe<Scalars['String']>;
  linkedinURL?: Maybe<Scalars['String']>;
  shortBio?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

export type Program = {
  __typename?: 'Program';
  body?: Maybe<Scalars['String']>;
  category?: Maybe<ProgramCategory>;
  children?: Maybe<Array<Maybe<Program>>>;
  duration: Duration;
  id: Scalars['ID'];
  instructorIds?: Maybe<Array<Scalars['ID']>>;
  instructors?: Maybe<Array<Maybe<Instructor>>>;
  kind: Scalars['String'];
  language?: Maybe<Scalars['String']>;
  lede?: Maybe<Scalars['String']>;
  legacy: Scalars['Boolean'];
  name: Scalars['String'];
  postRollQuiz?: Maybe<Scalars['String']>;
  preRollQuiz?: Maybe<Scalars['String']>;
  progressIsCurrent: Scalars['Boolean'];
  progressNext?: Maybe<Program>;
  progressPercentage?: Maybe<Scalars['Int']>;
  progressState: Scalars['String'];
  quizCount?: Maybe<Scalars['Int']>;
  shortDescription?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  themes?: Maybe<Array<ThemeKind>>;
  title?: Maybe<Scalars['String']>;
  titleImageUrl?: Maybe<Scalars['String']>;
  video?: Maybe<Video>;
  videoCount?: Maybe<Scalars['Int']>;
  videoId?: Maybe<Scalars['String']>;
  videoObject?: Maybe<Video>;
  weekCount?: Maybe<Scalars['Int']>;
};

export type ProgramAccess = {
  __typename?: 'ProgramAccess';
  accessStatus: ProgramAccessStatus;
  accessUntil?: Maybe<Scalars['BigInt']>;
  program?: Maybe<Program>;
  progressPercentage?: Maybe<Scalars['Int']>;
};

export enum ProgramAccessStatus {
  /** Access to program is active */
  Active = 'active',
  /** Access to program is expired */
  Expired = 'expired',
  /** Access to program is expiring in 30 days */
  ExpiringSoon = 'expiring_soon',
  /** No access to program */
  Locked = 'locked'
}

export type ProgramActiveState = {
  __typename?: 'ProgramActiveState';
  day?: Maybe<Program>;
  phase?: Maybe<Program>;
  sequence?: Maybe<Program>;
};

export enum ProgramCategory {
  Challenges = 'challenges',
  Courses = 'courses',
  Healthcare = 'healthcare',
  Programs = 'programs'
}

export type ProgramDocument = {
  __typename?: 'ProgramDocument';
  description?: Maybe<Scalars['String']>;
  document: Document;
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  kind?: Maybe<Scalars['String']>;
  locked: Scalars['Boolean'];
  position: Scalars['Int'];
  positionLabel: Scalars['String'];
  progressIsCurrent: Scalars['Boolean'];
  slug: Scalars['String'];
  subheader?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type ProgramElement = ProgramDocument | ProgramPartElement | ProgramSurveyElement | ProgramVideo;

export enum ProgramKind {
  CompletionBased = 'completion_based',
  ContentBased = 'content_based',
  DailyBased = 'daily_based',
  DateBased = 'date_based',
  PhaseBased = 'phase_based',
  WeeklyBased = 'weekly_based'
}

export type ProgramMeta = {
  __typename?: 'ProgramMeta';
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type ProgramPartElement = {
  __typename?: 'ProgramPartElement';
  description?: Maybe<Scalars['String']>;
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  kind?: Maybe<Scalars['String']>;
  locked: Scalars['Boolean'];
  position: Scalars['Int'];
  positionLabel: Scalars['String'];
  progressIsCurrent: Scalars['Boolean'];
  slug: Scalars['String'];
  subheader?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type ProgramPhase = {
  __typename?: 'ProgramPhase';
  description?: Maybe<Scalars['String']>;
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  locked: Scalars['Boolean'];
  progress?: Maybe<Scalars['Float']>;
  slug: Scalars['String'];
  weeks?: Maybe<Array<Maybe<ProgramWeek>>>;
};

export type ProgramSurvey = {
  __typename?: 'ProgramSurvey';
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  kind: SurveyKind;
  label: Scalars['String'];
  link: Scalars['String'];
  locked: Scalars['Boolean'];
};

export type ProgramSurveyCompletion = {
  __typename?: 'ProgramSurveyCompletion';
  programAccessId: Scalars['ID'];
  programSurveyId: Scalars['ID'];
};

export type ProgramSurveyElement = {
  __typename?: 'ProgramSurveyElement';
  description?: Maybe<Scalars['String']>;
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  lastSubmittedAt?: Maybe<Scalars['ISO8601Date']>;
  locked: Scalars['Boolean'];
  position: Scalars['Int'];
  positionLabel: Scalars['String'];
  progressIsCurrent: Scalars['Boolean'];
  slug: Scalars['String'];
  subheader?: Maybe<Scalars['String']>;
  survey: Survey;
  surveysAnswer?: Maybe<SurveyAnswer>;
  title?: Maybe<Scalars['String']>;
};

export type ProgramVideo = {
  __typename?: 'ProgramVideo';
  customDescription?: Maybe<Scalars['String']>;
  customTitle?: Maybe<Scalars['String']>;
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  locked: Scalars['Boolean'];
  position: Scalars['Int'];
  positionLabel: Scalars['String'];
  postMoodTracker?: Maybe<MoodTracker>;
  preMoodTracker?: Maybe<MoodTracker>;
  progressIsCurrent: Scalars['Boolean'];
  repeatRecomendation?: Maybe<Scalars['Int']>;
  slug: Scalars['String'];
  subheader?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  video: Video;
  videoKind?: Maybe<VideoKind>;
  watched?: Maybe<Scalars['Boolean']>;
};

export type ProgramWeek = {
  __typename?: 'ProgramWeek';
  description?: Maybe<Scalars['String']>;
  elements: Array<ProgramElement>;
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  label: Scalars['String'];
  locked: Scalars['Boolean'];
  progress?: Maybe<Scalars['Float']>;
  slug: Scalars['String'];
  videos: Array<ProgramVideo>;
};

export type ProgramsDetails = {
  __typename?: 'ProgramsDetails';
  description: Scalars['String'];
  instructor?: Maybe<Instructor>;
  label: Scalars['String'];
  perks?: Maybe<Array<Maybe<Scalars['String']>>>;
  title: Scalars['String'];
  video?: Maybe<Video>;
};

export type PromotionCode = {
  __typename?: 'PromotionCode';
  code: Scalars['String'];
  creationDate: Scalars['ISO8601DateTime'];
  expirationDate?: Maybe<Scalars['ISO8601Date']>;
  matchingResources: Array<PromotionCodeResource>;
  provider?: Maybe<Scalars['String']>;
  usageLimit?: Maybe<Scalars['Int']>;
  usedIn: Array<PromotionCodeUser>;
};

export type PromotionCodeResource = Bundle | GenericProgram | LiveEvent;

export enum PromotionCodeTypeKind {
  Trial = 'trial',
  Wellness = 'wellness'
}

export type PromotionCodeUser = {
  __typename?: 'PromotionCodeUser';
  live?: Maybe<LiveEvent>;
  usageDate: Scalars['ISO8601DateTime'];
};

export enum PromotionKind {
  ExtraGlobal = 'extra_global',
  Global = 'global',
  OneTimeCode = 'one_time_code',
  SubscriptionDiscountCode = 'subscription_discount_code',
  SubscriptionFullAccessCode = 'subscription_full_access_code',
  TrailCampaignCode = 'trail_campaign_code',
  TrialReclaim = 'trial_reclaim',
  TrialReferralCode = 'trial_referral_code'
}

export enum Provider {
  Apple = 'apple',
  Email = 'email',
  Facebook = 'facebook',
  Google = 'google'
}

export enum ProviderKind {
  Adyen = 'adyen',
  Trustly = 'trustly'
}

export enum ProviderTypes {
  Apple = 'Apple',
  Facebook = 'Facebook',
  Google = 'Google'
}

export enum ProxyEventKind {
  SurveyStarted = 'SURVEY_STARTED',
  TrialPeriodStarted = 'TRIAL_PERIOD_STARTED'
}

export type Query = {
  __typename?: 'Query';
  activateCampaignCode: CampaignCode;
  autocomplete: Autocomplete;
  availableOneTimeCode: AvailableSubscriptionPlan;
  availableSubscriptionPlans: AvailableSubscriptionPlan;
  availableTrial?: Maybe<Trial>;
  availableTrialExtensions: AvailableSubscriptionPlan;
  /** Search video */
  batchVideos: Array<Video>;
  bundle?: Maybe<Bundle>;
  bundles?: Maybe<PagedBundles>;
  campaignCode?: Maybe<CampaignCode>;
  currentUser?: Maybe<CurrentUser>;
  document?: Maybe<Document>;
  emailCheck?: Maybe<Email>;
  emailPreferences?: Maybe<Array<EmailPreference>>;
  favoritePlaylists?: Maybe<PagedPlaylists>;
  favoriteVideos: PagedVideos;
  flipperFlags?: Maybe<Array<FlipperFlag>>;
  genericProgram?: Maybe<GenericProgram>;
  genericPrograms?: Maybe<PagedGenericPrograms>;
  getFavoritePlaylists?: Maybe<PagedPlaylists>;
  getFavoriteVideos?: Maybe<PagedVideos>;
  getUser?: Maybe<User>;
  giftGenericProgram?: Maybe<GenericProgramWithCode>;
  instructor?: Maybe<Instructor>;
  instructorByGenre: InstructorInGenre;
  instructors?: Maybe<PagedInstructors>;
  lastWatchedSessions: Array<Video>;
  liveEvent?: Maybe<LiveEvent>;
  liveEventCodes: LiveEventCodes;
  liveEvents?: Maybe<PagedLiveEvents>;
  myBundles?: Maybe<PagedBundles>;
  myGenericPrograms?: Maybe<PagedGenericPrograms>;
  myPaymentMethods?: Maybe<Array<PaymentMethod>>;
  onboardingChoices: OnboardingChoices;
  order?: Maybe<Order>;
  overviewPlaylists?: Maybe<Array<Maybe<OverviewPlaylist>>>;
  pageByRoute?: Maybe<Page>;
  pages?: Maybe<PagedPages>;
  pay: PaymentResponse;
  phasedProgram?: Maybe<PhasedProgram>;
  playOverview: PlayOverview;
  playlist?: Maybe<Playlist>;
  playlists?: Maybe<PagedPlaylists>;
  posts?: Maybe<PagedBlogPosts>;
  precheckMobileSubscription?: Maybe<AppleSubscriptionPrecheck>;
  predictedLtv: Scalars['Int'];
  program?: Maybe<Program>;
  programActiveState?: Maybe<ProgramActiveState>;
  programById?: Maybe<Program>;
  programBySlug?: Maybe<Program>;
  programSurveyCompletion?: Maybe<ProgramSurveyCompletion>;
  programThemes?: Maybe<Array<Scalars['String']>>;
  receipts?: Maybe<Scalars['String']>;
  recentVideos?: Maybe<Array<Maybe<Video>>>;
  recommendations: Recommendations;
  recommendedOnboardingPlaylists: PagedPlaylists;
  recommendedOnboardingVideos: PagedVideos;
  recommendedPlaylists?: Maybe<PagedPlaylists>;
  relatedPagesByRoute?: Maybe<Array<Maybe<Page>>>;
  relatedVideos?: Maybe<Array<Maybe<Video>>>;
  search?: Maybe<Search>;
  searchSuggestions?: Maybe<Array<Maybe<Scalars['String']>>>;
  specificSearch?: Maybe<SpecificSearch>;
  startOverview: StartOverview;
  subPagesByRoute?: Maybe<PagedPages>;
  survey?: Maybe<Survey>;
  surveyPart?: Maybe<ProgramSurveyElement>;
  surveys?: Maybe<PagedSurveys>;
  taxonomies?: Maybe<Array<Maybe<TaxonomyItem>>>;
  testimonials: Array<Testimonial>;
  userOptions?: Maybe<Options>;
  userPlaylists?: Maybe<PagedPlaylists>;
  userStats: Stats;
  users?: Maybe<PagedUsers>;
  validateBundleCode?: Maybe<ValidateCode>;
  validateLiveEventCode: ValidateCode;
  validateSubscriptionTransfer?: Maybe<ValidateTransfer>;
  /** Search video */
  video?: Maybe<Video>;
  videos: PagedVideos;
  videosByFeature?: Maybe<PagedVideos>;
  waitingListBundles?: Maybe<PagedBundles>;
  weeklyProgram?: Maybe<WeeklyProgram>;
};


export type QueryActivateCampaignCodeArgs = {
  code: Scalars['String'];
};


export type QueryAutocompleteArgs = {
  query: Scalars['String'];
  searchType?: GlobalSearch;
};


export type QueryAvailableOneTimeCodeArgs = {
  code?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
};


export type QueryAvailableSubscriptionPlansArgs = {
  code?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
};


export type QueryAvailableTrialExtensionsArgs = {
  code?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
};


export type QueryBatchVideosArgs = {
  ids: Array<Scalars['String']>;
};


export type QueryBundleArgs = {
  client: Scalars['String'];
  slug: Scalars['String'];
};


export type QueryBundlesArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
};


export type QueryCampaignCodeArgs = {
  code: Scalars['String'];
};


export type QueryDocumentArgs = {
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};


export type QueryEmailCheckArgs = {
  email: Scalars['String'];
};


export type QueryEmailPreferencesArgs = {
  email?: InputMaybe<Scalars['String']>;
  token?: InputMaybe<Scalars['String']>;
};


export type QueryFavoritePlaylistsArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  searchQuery?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<PlaylistSortAttribute>;
};


export type QueryFavoriteVideosArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<VideoSortAttribute>;
};


export type QueryFlipperFlagsArgs = {
  names: Array<Scalars['String']>;
};


export type QueryGenericProgramArgs = {
  slug: Scalars['String'];
};


export type QueryGenericProgramsArgs = {
  category?: InputMaybe<ProgramCategory>;
  instructor?: InputMaybe<Scalars['String']>;
  languages?: InputMaybe<Array<LanguageKind>>;
  onlyMine?: InputMaybe<Scalars['Boolean']>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<GenericProgramSortAttribute>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  theme?: InputMaybe<Scalars['String']>;
};


export type QueryGetFavoritePlaylistsArgs = {
  id: Scalars['ID'];
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  searchQuery?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<PlaylistSortAttribute>;
};


export type QueryGetFavoriteVideosArgs = {
  id: Scalars['ID'];
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  searchQuery?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<VideoSortAttribute>;
};


export type QueryGetUserArgs = {
  id: Scalars['ID'];
};


export type QueryGiftGenericProgramArgs = {
  discountCode?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
};


export type QueryInstructorArgs = {
  contentLanguages?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id: Scalars['ID'];
};


export type QueryInstructorByGenreArgs = {
  genre?: InputMaybe<Scalars['String']>;
  instructor: Scalars['String'];
  languages?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type QueryInstructorsArgs = {
  contentLanguages?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  option?: InputMaybe<Option>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  sortBy?: InputMaybe<SortAttribute>;
  sortOrder?: InputMaybe<SortOrder>;
  theme?: InputMaybe<Scalars['String']>;
};


export type QueryLiveEventArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
};


export type QueryLiveEventsArgs = {
  instructor?: InputMaybe<Scalars['String']>;
  keyword?: InputMaybe<Scalars['String']>;
  kind?: InputMaybe<LiveEventKind>;
  languages?: InputMaybe<Array<LanguageKind>>;
  maxEventDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  minEventDate?: InputMaybe<Scalars['ISO8601DateTime']>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  sortBy?: InputMaybe<LiveEventSortAttribute>;
  sortOrder?: InputMaybe<SortOrder>;
};


export type QueryMyBundlesArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
};


export type QueryMyGenericProgramsArgs = {
  category?: InputMaybe<ProgramCategory>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
};


export type QueryOrderArgs = {
  id: Scalars['String'];
};


export type QueryPageByRouteArgs = {
  path: Scalars['String'];
};


export type QueryPagesArgs = {
  feature?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
};


export type QueryPayArgs = {
  paymentType?: InputMaybe<Scalars['String']>;
};


export type QueryPhasedProgramArgs = {
  slug: Scalars['String'];
};


export type QueryPlaylistArgs = {
  id: Scalars['ID'];
};


export type QueryPlaylistsArgs = {
  collection?: InputMaybe<Scalars['String']>;
  languages?: InputMaybe<Array<Scalars['String']>>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<PlaylistSortAttribute>;
};


export type QueryPostsArgs = {
  category?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
};


export type QueryPrecheckMobileSubscriptionArgs = {
  platform: DevicePlatformKind;
  purchaseIdentifier: Scalars['String'];
};


export type QueryProgramArgs = {
  id: Scalars['ID'];
};


export type QueryProgramActiveStateArgs = {
  id: Scalars['String'];
};


export type QueryProgramByIdArgs = {
  id: Scalars['String'];
};


export type QueryProgramBySlugArgs = {
  slug: Scalars['String'];
};


export type QueryProgramSurveyCompletionArgs = {
  genericProgramSlug: Scalars['String'];
  programSurveyKind: Scalars['String'];
};


export type QueryProgramThemesArgs = {
  category?: InputMaybe<ProgramCategory>;
};


export type QueryRecommendationsArgs = {
  languages: Array<InputMaybe<Scalars['String']>>;
};


export type QueryRecommendedOnboardingPlaylistsArgs = {
  languages: Array<InputMaybe<Scalars['String']>>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  slugs: Array<InputMaybe<Scalars['String']>>;
};


export type QueryRecommendedOnboardingVideosArgs = {
  languages: Array<InputMaybe<Scalars['String']>>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  slugs: Array<InputMaybe<Scalars['String']>>;
};


export type QueryRecommendedPlaylistsArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
};


export type QueryRelatedPagesByRouteArgs = {
  path: Scalars['String'];
};


export type QueryRelatedVideosArgs = {
  id: Scalars['ID'];
};


export type QuerySearchArgs = {
  languages: Array<LanguageKind>;
  query: Scalars['String'];
  searchType: GlobalSearch;
};


export type QuerySearchSuggestionsArgs = {
  query: Scalars['String'];
};


export type QuerySpecificSearchArgs = {
  languages: Array<LanguageKind>;
  modelType: ModelNameKind;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};


export type QuerySubPagesByRouteArgs = {
  page?: InputMaybe<Scalars['Int']>;
  path: Scalars['String'];
  perPage?: InputMaybe<Scalars['Int']>;
};


export type QuerySurveyArgs = {
  slug: Scalars['String'];
};


export type QuerySurveyPartArgs = {
  surveyPartId: Scalars['Int'];
};


export type QuerySurveysArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
};


export type QueryTaxonomiesArgs = {
  filter?: InputMaybe<Scalars['String']>;
  genre?: InputMaybe<Scalars['String']>;
  languages?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type QueryUserPlaylistsArgs = {
  id?: InputMaybe<Scalars['ID']>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  searchQuery?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<PlaylistSortAttribute>;
};


export type QueryUserStatsArgs = {
  period?: InputMaybe<StatsPeriodKind>;
};


export type QueryUsersArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
};


export type QueryValidateBundleCodeArgs = {
  client: Scalars['String'];
  code: Scalars['String'];
  slug: Scalars['String'];
};


export type QueryValidateLiveEventCodeArgs = {
  code: Scalars['String'];
  slug: Scalars['String'];
};


export type QueryValidateSubscriptionTransferArgs = {
  newUser: Scalars['String'];
  oldUser: Scalars['String'];
};


export type QueryVideoArgs = {
  id: Scalars['ID'];
};


export type QueryVideosArgs = {
  contentLanguages?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  durations?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  excludeTerms?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  flavor?: InputMaybe<Scalars['String']>;
  genre?: InputMaybe<Scalars['String']>;
  kinds?: InputMaybe<Array<VideoKindInput>>;
  orderBy?: InputMaybe<VideoOrderBy>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  quickstartCategory?: InputMaybe<Scalars['String']>;
  taxonomies?: InputMaybe<Array<TaxonomyInput>>;
  useLocale?: InputMaybe<Scalars['Boolean']>;
  videoLevels?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type QueryVideosByFeatureArgs = {
  feature?: Scalars['String'];
  languages?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  q?: InputMaybe<Scalars['String']>;
};


export type QueryWaitingListBundlesArgs = {
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
};


export type QueryWeeklyProgramArgs = {
  slug: Scalars['String'];
};

export type Recommendations = {
  __typename?: 'Recommendations';
  courses?: Maybe<Array<Course>>;
  playlists?: Maybe<Array<Playlist>>;
  videos?: Maybe<Array<Video>>;
};

export type RegistrationDetail = {
  __typename?: 'RegistrationDetail';
  campaign?: Maybe<Scalars['String']>;
  campaignCode?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
  redirectTo?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of Registration */
export type RegistrationPayload = {
  __typename?: 'RegistrationPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<CurrentUser>;
};

export enum RegistrationSourceKind {
  Blog = 'blog',
  Bundle = 'bundle',
  Challenge = 'challenge',
  Course = 'course',
  Live = 'live',
  Playlist = 'playlist',
  Program = 'program',
  Video = 'video'
}

/** Autogenerated return type of RegistrationV2 */
export type RegistrationV2Payload = {
  __typename?: 'RegistrationV2Payload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<CurrentUser>;
};

/** Autogenerated return type of RemoveVideoFromPlaylist */
export type RemoveVideoFromPlaylistPayload = {
  __typename?: 'RemoveVideoFromPlaylistPayload';
  playlist?: Maybe<Playlist>;
};

/** Autogenerated return type of ResendConfirmationEmail */
export type ResendConfirmationEmailPayload = {
  __typename?: 'ResendConfirmationEmailPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of ResetEmailConfirmation */
export type ResetEmailConfirmationPayload = {
  __typename?: 'ResetEmailConfirmationPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of ResetPassword */
export type ResetPasswordPayload = {
  __typename?: 'ResetPasswordPayload';
  success: Scalars['Boolean'];
};

/** Autogenerated return type of ResetSummerCampaign */
export type ResetSummerCampaignPayload = {
  __typename?: 'ResetSummerCampaignPayload';
  action?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<ProcessingError>>;
};

/** Autogenerated return type of RestoreMobileSubscription */
export type RestoreMobileSubscriptionPayload = {
  __typename?: 'RestoreMobileSubscriptionPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<CurrentUser>;
};

export type RiskDataInput = {
  clientData?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of SaveOnboardingChoices */
export type SaveOnboardingChoicesPayload = {
  __typename?: 'SaveOnboardingChoicesPayload';
  errors?: Maybe<Array<Error>>;
  success: Scalars['Boolean'];
  user?: Maybe<User>;
};

/** Autogenerated return type of SavePhasedProgramProgress */
export type SavePhasedProgramProgressPayload = {
  __typename?: 'SavePhasedProgramProgressPayload';
  errors: Array<Scalars['String']>;
};

/** Autogenerated return type of SaveProgramProgress */
export type SaveProgramProgressPayload = {
  __typename?: 'SaveProgramProgressPayload';
  errors: Array<Scalars['String']>;
};

export type Search = {
  __typename?: 'Search';
  blogPosts?: Maybe<SearchResults>;
  challenges?: Maybe<SearchResults>;
  courses?: Maybe<SearchResults>;
  events?: Maybe<SearchResults>;
  genericPrograms?: Maybe<SearchResults>;
  instructors?: Maybe<SearchResults>;
  landingPages?: Maybe<SearchResults>;
  liveEvents?: Maybe<SearchResults>;
  playlists?: Maybe<SearchResults>;
  query?: Maybe<Scalars['String']>;
  suggestions?: Maybe<Array<Scalars['String']>>;
  videos?: Maybe<SearchResults>;
};

export type SearchBlogPost = {
  __typename?: 'SearchBlogPost';
  featuredImageUrl?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  slug: Scalars['String'];
  title: Scalars['String'];
};

export type SearchEvent = {
  __typename?: 'SearchEvent';
  description?: Maybe<Scalars['String']>;
  endsAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  instructor?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  slug?: Maybe<Scalars['String']>;
  startsAt?: Maybe<Scalars['ISO8601DateTime']>;
  titleImageUrl?: Maybe<Scalars['String']>;
};

export type SearchGenericProgram = {
  __typename?: 'SearchGenericProgram';
  accessPeriod?: Maybe<AccessPeriod>;
  category?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  durationUnit?: Maybe<Scalars['String']>;
  durationValue?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  instructorName?: Maybe<Scalars['String']>;
  instructorSlug?: Maybe<Scalars['String']>;
  price?: Maybe<Price>;
  priceType?: Maybe<PriceTypeKind>;
  slug?: Maybe<Scalars['String']>;
  themes?: Maybe<Array<ThemeKind>>;
  title: Scalars['String'];
  titleImageUrl?: Maybe<Scalars['String']>;
};

export type SearchInstructor = {
  __typename?: 'SearchInstructor';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  squareImageUrl?: Maybe<Scalars['String']>;
};

export type SearchLandingPage = {
  __typename?: 'SearchLandingPage';
  id: Scalars['ID'];
  lede?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type SearchLiveEvent = {
  __typename?: 'SearchLiveEvent';
  availableSpots?: Maybe<Scalars['Int']>;
  bookingAvailable?: Maybe<Scalars['Boolean']>;
  /** duration in minutes. Should step by 15 minutes, so 0, 15, 30, etc. */
  duration: Scalars['Int'];
  eventDates: Array<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  instructorName?: Maybe<Scalars['String']>;
  instructorSlug?: Maybe<Scalars['String']>;
  kind: LiveEventKind;
  maximumParticipants?: Maybe<Scalars['Int']>;
  registrationEndDate?: Maybe<Scalars['ISO8601DateTime']>;
  registrationStartDate?: Maybe<Scalars['ISO8601DateTime']>;
  slug?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  thumbnailUrl?: Maybe<Scalars['String']>;
  title: Scalars['String'];
};

export type SearchPlaylist = {
  __typename?: 'SearchPlaylist';
  description: Scalars['String'];
  id: Scalars['ID'];
  identifier: Scalars['String'];
  minutes?: Maybe<Scalars['String']>;
  ownerId?: Maybe<Scalars['String']>;
  thumbnailUrl?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  videoCount?: Maybe<Scalars['String']>;
  visibility?: Maybe<Scalars['String']>;
};

export type SearchResult = SearchBlogPost | SearchEvent | SearchGenericProgram | SearchInstructor | SearchLandingPage | SearchLiveEvent | SearchPlaylist | SearchVideo;

export type SearchResults = PagedInterface & {
  __typename?: 'SearchResults';
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  results?: Maybe<Array<SearchResult>>;
  totalCount: Scalars['Int'];
};

export type SearchVideo = {
  __typename?: 'SearchVideo';
  id: Scalars['ID'];
  identifier: Scalars['String'];
  instructorName?: Maybe<Scalars['String']>;
  instructorSlug?: Maybe<Scalars['String']>;
  kind: Scalars['String'];
  longDescription: Scalars['String'];
  minutes: Scalars['String'];
  primaryStyleName?: Maybe<Scalars['String']>;
  primaryStyleSlug?: Maybe<Scalars['String']>;
  shortDescription: Scalars['String'];
  thumbnailUrl?: Maybe<Scalars['String']>;
  title: Scalars['String'];
};

/** Autogenerated return type of SignIn */
export type SignInPayload = {
  __typename?: 'SignInPayload';
  success?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserInterface>;
};

/** Autogenerated return type of SignUp */
export type SignUpPayload = {
  __typename?: 'SignUpPayload';
  success?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserInterface>;
};

export enum SlugTypeKind {
  Breath = 'breath',
  Grow = 'grow',
  Meditate = 'meditate',
  Move = 'move',
  Yoga = 'yoga'
}

export enum SortAttribute {
  Name = 'name'
}

export enum SortOrder {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type SpecialSection = {
  __typename?: 'SpecialSection';
  assetUrl?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  label: Scalars['String'];
  slug: Scalars['String'];
  videos?: Maybe<Array<Maybe<ProgramVideo>>>;
};

export type SpecificSearch = {
  __typename?: 'SpecificSearch';
  blogPosts?: Maybe<SearchResults>;
  challenges?: Maybe<SearchResults>;
  courses?: Maybe<SearchResults>;
  events?: Maybe<SearchResults>;
  genericPrograms?: Maybe<SearchResults>;
  instructors?: Maybe<SearchResults>;
  landingPages?: Maybe<SearchResults>;
  liveEvents?: Maybe<SearchResults>;
  playlists?: Maybe<SearchResults>;
  query?: Maybe<Scalars['String']>;
  suggestions?: Maybe<Array<Scalars['String']>>;
  videos?: Maybe<SearchResults>;
};

export type StartOverview = {
  __typename?: 'StartOverview';
  campaignSection?: Maybe<CampaignSection>;
  coursesSection?: Maybe<CoursesSection>;
  ctaSection?: Maybe<CtaSection>;
  featuresSection?: Maybe<FeaturesSection>;
  genresSection?: Maybe<GenresSection>;
  heroSection?: Maybe<HeroSection>;
  metaSection?: Maybe<MetaSection>;
  mobileAppSection?: Maybe<MobileAppSection>;
  otherFeaturesSection?: Maybe<OtherFeaturesSection>;
  videoLibrarySection?: Maybe<VideosLibrarySection>;
};

export enum State {
  Draft = 'draft',
  Finished = 'finished'
}

export type Statistics = {
  __typename?: 'Statistics';
  averageDuration?: Maybe<Scalars['Int']>;
  favoriteStyle?: Maybe<Term>;
  sessionsCompleted: Scalars['Int'];
  sessionsLastWeek: Scalars['Int'];
  totalTime: Scalars['Int'];
};

export type Stats = {
  __typename?: 'Stats';
  numberOfChallengesStarted: Scalars['Int'];
  numberOfCoursesStarted: Scalars['Int'];
  numberOfLiveEventsBooked: Scalars['Int'];
  numberOfProgramsStarted: Scalars['Int'];
  playlistsCreated: Scalars['Int'];
  sessionsCompleted: Scalars['Int'];
  sessionsFavorited?: Maybe<Scalars['Int']>;
  threeMostWatchedInstructors: Array<Instructor>;
  threeMostWatchedStyles: Array<Term>;
  totalWatchTime?: Maybe<Scalars['Int']>;
};

export enum StatsPeriodKind {
  SevenDays = 'sevenDays',
  ThirtyDays = 'thirtyDays'
}

/** Autogenerated return type of StoreAdyenDropin */
export type StoreAdyenDropinPayload = {
  __typename?: 'StoreAdyenDropinPayload';
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']>;
  recurringDate?: Maybe<Scalars['String']>;
  recurringPaymentAmount?: Maybe<Scalars['String']>;
  recurringPaymentCurrency?: Maybe<Scalars['String']>;
  resultAction?: Maybe<AdyenAction>;
  resultCode?: Maybe<PaymentResultCodeKind>;
  transaction?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of StorePaymentDetails */
export type StorePaymentDetailsPayload = {
  __typename?: 'StorePaymentDetailsPayload';
  action?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']>;
  resultAction?: Maybe<Scalars['String']>;
  resultCode?: Maybe<Scalars['String']>;
  transaction?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of StoreTransactionId */
export type StoreTransactionIdPayload = {
  __typename?: 'StoreTransactionIdPayload';
  /** Apple service error message */
  errors?: Maybe<Array<Error>>;
  /** Apple service error status code */
  statusCode?: Maybe<Scalars['Int']>;
  /** Yogobe backend receipt validation message */
  validationMessage?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of StoreTrustly */
export type StoreTrustlyPayload = {
  __typename?: 'StoreTrustlyPayload';
  errors?: Maybe<Array<Error>>;
  orderId?: Maybe<Scalars['String']>;
  recurringDate?: Maybe<Scalars['String']>;
  recurringPaymentAmount?: Maybe<Scalars['String']>;
  recurringPaymentCurrency?: Maybe<Scalars['String']>;
  resultUrl?: Maybe<Scalars['String']>;
  transaction?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of StoreUserDecision */
export type StoreUserDecisionPayload = {
  __typename?: 'StoreUserDecisionPayload';
  user: User;
};

export type Story = {
  __typename?: 'Story';
  createdAt: Scalars['ISO8601DateTime'];
  hasAccess: Scalars['Boolean'];
  id: Scalars['ID'];
  progress: Scalars['Int'];
  resourceClass?: Maybe<Scalars['String']>;
  resourceId: Scalars['ID'];
  updatedAt: Scalars['ISO8601DateTime'];
  userId: Scalars['ID'];
};

/** Autogenerated return type of SubmitInterestForm */
export type SubmitInterestFormPayload = {
  __typename?: 'SubmitInterestFormPayload';
  errors: Array<ProcessingError>;
};

export type Subscription = {
  __typename?: 'Subscription';
  /** The latest plan (1m, 3m, 12, preglife, ninetynine ...) that user subscribed with, in other words, its the current subscription plan of the user of this subscripltion */
  currentSubscriptionPlan: SubscriptionPlan;
  /** In trial period if current subscription is trial and is active */
  inTrialPeriod: Scalars['Boolean'];
  /** Provider of the subscripton based on plan platform */
  provider?: Maybe<Scalars['String']>;
  status: SubscriptionStatus;
  /** User access_until will be present only if user is on trial */
  trialExpiration?: Maybe<Scalars['ISO8601Date']>;
};

export type SubscriptionPayment = OrderPaymentInterface & {
  __typename?: 'SubscriptionPayment';
  amountCents: Scalars['Int'];
  amountCurrency: CurrencyKind;
  months: Scalars['Int'];
  orderId: Scalars['String'];
  originalAmountCents?: Maybe<Scalars['Int']>;
  paymentProvider: PaymentProviderKind;
  recurringAmountCents?: Maybe<Scalars['Int']>;
  recurringDate?: Maybe<Scalars['ISO8601Date']>;
  state: PaymentStatusKind;
  success: Scalars['Boolean'];
};

export type SubscriptionPlan = {
  __typename?: 'SubscriptionPlan';
  amountCents: Scalars['Int'];
  amountCurrency: Scalars['String'];
  planType: Scalars['String'];
  platform?: Maybe<DevicePlatformKind>;
  /** Not relevant for web platform */
  productId?: Maybe<Scalars['String']>;
};

export enum SubscriptionStatus {
  Active = 'active',
  Cancelled = 'cancelled',
  PastDue = 'past_due',
  Unpaid = 'unpaid'
}

export type Survey = {
  __typename?: 'Survey';
  content: SurveyContent;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  questions?: Maybe<Array<Maybe<SurveyQuestion>>>;
  slug?: Maybe<Scalars['String']>;
};

export type SurveyAnswer = {
  __typename?: 'SurveyAnswer';
  content: Array<ContentAnswer>;
  contextableType?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  state?: Maybe<State>;
  userId: Scalars['ID'];
};

export type SurveyContent = {
  __typename?: 'SurveyContent';
  page1Description?: Maybe<Scalars['String']>;
  page1Title?: Maybe<Scalars['String']>;
  page2Description?: Maybe<Scalars['String']>;
  page2Title?: Maybe<Scalars['String']>;
  page3ButtonText?: Maybe<Scalars['String']>;
  page3ButtonUrl?: Maybe<Scalars['String']>;
  page3Description?: Maybe<Scalars['String']>;
  page3Title?: Maybe<Scalars['String']>;
};

export enum SurveyKind {
  Post = 'post',
  Pre = 'pre'
}

export type SurveyOptions = {
  __typename?: 'SurveyOptions';
  default?: Maybe<Scalars['String']>;
  hint?: Maybe<Scalars['String']>;
  leftLabel?: Maybe<Scalars['String']>;
  maxValue?: Maybe<Scalars['Int']>;
  minValue?: Maybe<Scalars['Int']>;
  required: Scalars['Boolean'];
  rightLabel?: Maybe<Scalars['String']>;
  type: SurveyTypeKind;
  useForNps?: Maybe<Scalars['Boolean']>;
};

export type SurveyQuestion = {
  __typename?: 'SurveyQuestion';
  answers?: Maybe<Array<Scalars['String']>>;
  id: Scalars['String'];
  options?: Maybe<SurveyOptions>;
  question?: Maybe<Scalars['String']>;
};

export enum SurveyTypeKind {
  CheckBoxes = 'check_boxes',
  DropDown = 'drop_down',
  DropDownMulti = 'drop_down_multi',
  EmojiSlider = 'emoji_slider',
  Input = 'input',
  MoodSlider = 'mood_slider',
  NumericalSlider = 'numerical_slider',
  RadioButtons = 'radio_buttons',
  RadioSlider = 'radio_slider',
  RadioSlider2 = 'radio_slider2',
  StarRating = 'star_rating',
  TextArea = 'text_area'
}

export type Taxonomy = {
  __typename?: 'Taxonomy';
  bodyparts?: Maybe<Array<Maybe<Term>>>;
  duration?: Maybe<Array<Maybe<Term>>>;
  flavor?: Maybe<Term>;
  genre?: Maybe<Term>;
  instructors?: Maybe<Array<Maybe<Instructor>>>;
  needs?: Maybe<Array<Maybe<Term>>>;
  props?: Maybe<Array<Maybe<Term>>>;
  styles?: Maybe<Array<Maybe<Term>>>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TaxonomyForLandingPage = {
  __typename?: 'TaxonomyForLandingPage';
  duration?: Maybe<Term>;
  genre?: Maybe<Term>;
  instructors?: Maybe<Array<Instructor>>;
};

export type TaxonomyInput = {
  taxonomy?: InputMaybe<Scalars['String']>;
  values?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type TaxonomyItem = {
  __typename?: 'TaxonomyItem';
  genres?: Maybe<Array<Scalars['String']>>;
  hasPrio?: Maybe<Scalars['Boolean']>;
  hierarchical?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  languages?: Maybe<Array<Scalars['String']>>;
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  terms?: Maybe<Array<Term>>;
  types?: Maybe<Array<Scalars['String']>>;
};

export type Term = {
  __typename?: 'Term';
  genres?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  important?: Maybe<Scalars['Boolean']>;
  languages?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  prio?: Maybe<Scalars['Boolean']>;
  selected?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['String']>;
  titleImageUrl?: Maybe<Scalars['String']>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Testimonial = {
  __typename?: 'Testimonial';
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  quote: Scalars['String'];
  title: Scalars['String'];
};

export enum ThemeKind {
  Athletes = 'athletes',
  Beginner = 'beginner',
  Breathing = 'breathing',
  DietAndNutrition = 'diet_and_nutrition',
  Meditation = 'meditation',
  MobilityAndPrehab = 'mobility_and_prehab',
  PersonalGrowth = 'personal_growth',
  Philosophy = 'philosophy',
  Postnatal = 'postnatal',
  Prenatal = 'prenatal',
  Restoration = 'restoration',
  Skills = 'skills',
  SmartBreaks = 'smart_breaks',
  StressAndAnxiety = 'stress_and_anxiety',
  WomensHealth = 'womens_health',
  Workout = 'workout',
  Yoga = 'yoga',
  YogaTeachers = 'yoga_teachers'
}

export type Topic = {
  __typename?: 'Topic';
  hasContent: Scalars['Boolean'];
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  slug: Scalars['String'];
};

export type Trial = {
  __typename?: 'Trial';
  claimedAt?: Maybe<Scalars['ISO8601DateTime']>;
  endDate?: Maybe<Scalars['ISO8601Date']>;
  id: Scalars['ID'];
  periodDays: Scalars['Int'];
  subscriptionPlanType?: Maybe<PlanTypeKind>;
};

export type TwentyThree = {
  __typename?: 'TwentyThree';
  iframeUrl?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePaymentMethodSettings */
export type UpdatePaymentMethodSettingsPayload = {
  __typename?: 'UpdatePaymentMethodSettingsPayload';
  errors?: Maybe<Array<Scalars['String']>>;
  success: Scalars['Boolean'];
};

export type User = UserInterface & {
  __typename?: 'User';
  accessToken?: Maybe<Scalars['String']>;
  accessUntil?: Maybe<Scalars['String']>;
  accountActivatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  address?: Maybe<Scalars['String']>;
  assets?: Maybe<Assets>;
  availableForTrial: Scalars['Boolean'];
  challengeParticipations: Array<Maybe<ChallengeParticipant>>;
  city?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['ISO8601DateTime']>;
  country?: Maybe<Scalars['String']>;
  courseAccesses: Array<Maybe<CourseAccess>>;
  dateOfBirth?: Maybe<Scalars['Int']>;
  eligibleForDelete?: Maybe<Scalars['Boolean']>;
  eligibleForStartDiscount?: Maybe<Scalars['Boolean']>;
  eligibleForTrial?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  emailLanguage?: Maybe<Scalars['String']>;
  extraPayments?: Maybe<Array<Maybe<ExtraPayment>>>;
  favorites?: Maybe<Favorites>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  group: Scalars['String'];
  hasWebPayments?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  interests?: Maybe<Array<Interest>>;
  isEmailActivated?: Maybe<Scalars['Boolean']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  kind?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  liveEventsAccess?: Maybe<Array<Maybe<LiveEventAccess>>>;
  locale?: Maybe<Scalars['String']>;
  nextBillingCycle?: Maybe<NextBillingCycle>;
  onboardingCompleted: Scalars['Boolean'];
  onboardingInterestsSkipped: Scalars['Boolean'];
  onboardingSkipped: Scalars['Boolean'];
  onboardingTopicsSkipped: Scalars['Boolean'];
  paymentFailedAt?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
  paymentTypeRenews?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  playlists: Array<Maybe<Playlist>>;
  preferences?: Maybe<Preferences>;
  previousEmail?: Maybe<Scalars['String']>;
  privacySettings?: Maybe<PrivacySettings>;
  profession?: Maybe<Scalars['String']>;
  profile?: Maybe<Profile>;
  programAccess: Array<Maybe<ProgramAccess>>;
  programs?: Maybe<Array<Maybe<Page>>>;
  provider: Provider;
  receipts: Array<Maybe<Payment>>;
  referralCode?: Maybe<Scalars['String']>;
  registrationDetail: RegistrationDetail;
  signUpPlatform?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  statistics?: Maybe<Statistics>;
  stories: Array<Story>;
  subscription: Subscription;
  topics?: Maybe<Array<Topic>>;
  trialPeriod?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
  videoNotes?: Maybe<VideoNote>;
  zipcode?: Maybe<Scalars['String']>;
};

export type UserAccess = {
  __typename?: 'UserAccess';
  accessUntil?: Maybe<Scalars['ISO8601DateTime']>;
  active: Scalars['Boolean'];
  id: Scalars['ID'];
  user: User;
};

export enum UserDecisionKind {
  ProvaYogobe14 = 'ProvaYogobe14'
}

export type UserInterface = {
  accessToken?: Maybe<Scalars['String']>;
  accessUntil?: Maybe<Scalars['String']>;
  accountActivatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  address?: Maybe<Scalars['String']>;
  assets?: Maybe<Assets>;
  availableForTrial: Scalars['Boolean'];
  challengeParticipations: Array<Maybe<ChallengeParticipant>>;
  city?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['ISO8601DateTime']>;
  country?: Maybe<Scalars['String']>;
  courseAccesses: Array<Maybe<CourseAccess>>;
  dateOfBirth?: Maybe<Scalars['Int']>;
  eligibleForDelete?: Maybe<Scalars['Boolean']>;
  eligibleForStartDiscount?: Maybe<Scalars['Boolean']>;
  eligibleForTrial?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  emailLanguage?: Maybe<Scalars['String']>;
  extraPayments?: Maybe<Array<Maybe<ExtraPayment>>>;
  favorites?: Maybe<Favorites>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  group: Scalars['String'];
  hasWebPayments?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  interests?: Maybe<Array<Interest>>;
  isEmailActivated?: Maybe<Scalars['Boolean']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  kind?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  liveEventsAccess?: Maybe<Array<Maybe<LiveEventAccess>>>;
  locale?: Maybe<Scalars['String']>;
  nextBillingCycle?: Maybe<NextBillingCycle>;
  onboardingCompleted: Scalars['Boolean'];
  onboardingInterestsSkipped: Scalars['Boolean'];
  onboardingSkipped: Scalars['Boolean'];
  onboardingTopicsSkipped: Scalars['Boolean'];
  paymentFailedAt?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
  paymentTypeRenews?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  playlists: Array<Maybe<Playlist>>;
  preferences?: Maybe<Preferences>;
  previousEmail?: Maybe<Scalars['String']>;
  privacySettings?: Maybe<PrivacySettings>;
  profession?: Maybe<Scalars['String']>;
  profile?: Maybe<Profile>;
  programAccess: Array<Maybe<ProgramAccess>>;
  programs?: Maybe<Array<Maybe<Page>>>;
  provider: Provider;
  receipts: Array<Maybe<Payment>>;
  referralCode?: Maybe<Scalars['String']>;
  registrationDetail: RegistrationDetail;
  signUpPlatform?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  statistics?: Maybe<Statistics>;
  stories: Array<Story>;
  subscription: Subscription;
  topics?: Maybe<Array<Topic>>;
  trialPeriod?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
  videoNotes?: Maybe<VideoNote>;
  zipcode?: Maybe<Scalars['String']>;
};

export type UserSubscription = {
  __typename?: 'UserSubscription';
  accessUntil?: Maybe<Scalars['ISO8601Date']>;
  /** Regular price of a basic plan or promotion */
  amount?: Maybe<Scalars['Float']>;
  currency?: Maybe<Scalars['String']>;
  /** Days to extend the access */
  days?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  /** Will be present only for basic plan on which global discount is applied */
  discountedAmount?: Maybe<Scalars['Float']>;
  /** true when promotion is added next to the basic plans */
  extraPromotion: Scalars['Boolean'];
  /** Months to extend the access */
  months?: Maybe<Scalars['Int']>;
  platform: Scalars['String'];
  /** Product id defined in external store, i.e. appstore(Apple), playstore(Google), etc. */
  productId?: Maybe<Scalars['String']>;
  promotionKind?: Maybe<PromotionKind>;
  /** Only for promotions. Returns promotion name */
  promotionName?: Maybe<Scalars['String']>;
  /** If set to true, next and every other payment cycle will charge the discounted amount */
  recurringPromotion?: Maybe<Scalars['Boolean']>;
  shortDescription?: Maybe<Scalars['String']>;
  /** Gives unique value by which payment could be made. For basic plans and promotions */
  subscriptionName: Scalars['String'];
  /** Basic plan name, may be one of trial, monthly, quarterly, yearly, free_plan, notrial_monthly, notrial_quarterly, notrial_yearly, trial_monthly, trial_quarterly, trial_yearly */
  subscriptionPlan?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type ValidateCode = {
  __typename?: 'ValidateCode';
  code?: Maybe<Scalars['String']>;
  codeDetails?: Maybe<CodeDetails>;
  message?: Maybe<Scalars['String']>;
  status?: Maybe<CodeStatusKind>;
};

/** Autogenerated return type of Validate */
export type ValidatePayload = {
  __typename?: 'ValidatePayload';
  errors: Array<ProcessingError>;
  program?: Maybe<GenericProgram>;
  status: Scalars['String'];
  url?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ValidateProgramCode */
export type ValidateProgramCodePayload = {
  __typename?: 'ValidateProgramCodePayload';
  code?: Maybe<Scalars['String']>;
  codeSource?: Maybe<CodeSourceKind>;
  codeStatus?: Maybe<CodeStatusKind>;
  codeType?: Maybe<CodeTypeKind>;
  error?: Maybe<Scalars['String']>;
  price?: Maybe<Price>;
  program?: Maybe<GenericProgram>;
};

/** Autogenerated return type of ValidateToken */
export type ValidateTokenPayload = {
  __typename?: 'ValidateTokenPayload';
  errors?: Maybe<Array<ProcessingError>>;
  status: Scalars['String'];
};

export type ValidateTransfer = {
  __typename?: 'ValidateTransfer';
  errors?: Maybe<Scalars['String']>;
  valid?: Maybe<Scalars['Boolean']>;
};

export type Video = VideoInterface & {
  __typename?: 'Video';
  assets?: Maybe<VideoAssets>;
  categories: Array<Scalars['String']>;
  content?: Maybe<VideoContent>;
  crossPromotion?: Maybe<Array<GenericProgram>>;
  crossPromotionCourse?: Maybe<Array<Scalars['String']>>;
  crossPromotionModel?: Maybe<Scalars['String']>;
  cursorAt?: Maybe<Scalars['Int']>;
  customThumbnailUrl?: Maybe<Scalars['String']>;
  durationInSeconds?: Maybe<Scalars['Int']>;
  favorited: Scalars['Boolean'];
  fileAssets: Array<VideoFileAsset>;
  freeAccess: Scalars['Boolean'];
  hasAccess: Scalars['Boolean'];
  hls: Scalars['String'];
  id: Scalars['ID'];
  identifier: Scalars['String'];
  inPlaylists: Array<Scalars['String']>;
  kind: Scalars['String'];
  language: LanguageKind;
  longDescription: Scalars['String'];
  meta?: Maybe<VideoMeta>;
  minutes: Scalars['Int'];
  pinnedTo: Scalars['String'];
  player?: Maybe<VideoInfo>;
  primaryStyle?: Maybe<Term>;
  protectionContinueTitle?: Maybe<Scalars['String']>;
  protectionMessage?: Maybe<Scalars['String']>;
  protectionTitle?: Maybe<Scalars['String']>;
  publishedAt: Scalars['Int'];
  quickstartCategory: Scalars['String'];
  removedText?: Maybe<Scalars['String']>;
  shortDescription: Scalars['String'];
  taxonomies: Taxonomy;
  thumbnailUrl?: Maybe<Scalars['String']>;
  thumbnailUrlMedium?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  twentythreeIframeUrl: Scalars['String'];
  userPlaylists?: Maybe<Array<Scalars['ID']>>;
};

export type VideoAssets = {
  __typename?: 'VideoAssets';
  thumbnailUrl?: Maybe<Scalars['String']>;
  thumbnailUrlMedium?: Maybe<Scalars['String']>;
};

export type VideoContent = {
  __typename?: 'VideoContent';
  longDescription?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type VideoFileAsset = {
  __typename?: 'VideoFileAsset';
  resolution?: Maybe<Scalars['Int']>;
  size?: Maybe<Scalars['Int']>;
  src?: Maybe<Scalars['String']>;
};

export type VideoInfo = {
  __typename?: 'VideoInfo';
  assets?: Maybe<Array<Maybe<VideoFileAsset>>>;
  hasAccess?: Maybe<Scalars['Boolean']>;
  twentyThree?: Maybe<TwentyThree>;
};

export type VideoInterface = {
  assets?: Maybe<VideoAssets>;
  categories: Array<Scalars['String']>;
  content?: Maybe<VideoContent>;
  crossPromotion?: Maybe<Array<GenericProgram>>;
  crossPromotionCourse?: Maybe<Array<Scalars['String']>>;
  crossPromotionModel?: Maybe<Scalars['String']>;
  cursorAt?: Maybe<Scalars['Int']>;
  customThumbnailUrl?: Maybe<Scalars['String']>;
  durationInSeconds?: Maybe<Scalars['Int']>;
  favorited: Scalars['Boolean'];
  fileAssets: Array<VideoFileAsset>;
  freeAccess: Scalars['Boolean'];
  hasAccess: Scalars['Boolean'];
  hls: Scalars['String'];
  id: Scalars['ID'];
  identifier: Scalars['String'];
  inPlaylists: Array<Scalars['String']>;
  kind: Scalars['String'];
  language: LanguageKind;
  longDescription: Scalars['String'];
  meta?: Maybe<VideoMeta>;
  minutes: Scalars['Int'];
  pinnedTo: Scalars['String'];
  player?: Maybe<VideoInfo>;
  primaryStyle?: Maybe<Term>;
  protectionContinueTitle?: Maybe<Scalars['String']>;
  protectionMessage?: Maybe<Scalars['String']>;
  protectionTitle?: Maybe<Scalars['String']>;
  publishedAt: Scalars['Int'];
  quickstartCategory: Scalars['String'];
  removedText?: Maybe<Scalars['String']>;
  shortDescription: Scalars['String'];
  taxonomies: Taxonomy;
  thumbnailUrl?: Maybe<Scalars['String']>;
  thumbnailUrlMedium?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  twentythreeIframeUrl: Scalars['String'];
  userPlaylists?: Maybe<Array<Scalars['ID']>>;
};

export enum VideoKind {
  Bonus = 'bonus',
  Exercise = 'exercise',
  Introduction = 'introduction',
  Lecture = 'lecture',
  Question = 'question',
  Skills = 'skills',
  Talk = 'talk',
  Workshop = 'workshop'
}

export enum VideoKindInput {
  Audio = 'audio',
  Video = 'video'
}

export type VideoMeta = {
  __typename?: 'VideoMeta';
  freeAccess?: Maybe<Scalars['Boolean']>;
  language?: Maybe<Scalars['String']>;
  minutes?: Maybe<Scalars['Int']>;
  publishedAt?: Maybe<Scalars['Int']>;
};

export type VideoNote = {
  __typename?: 'VideoNote';
  note?: Maybe<Scalars['String']>;
  videoId?: Maybe<Scalars['ID']>;
};

export enum VideoOrderBy {
  Alphabetical = 'alphabetical',
  Duration = 'duration',
  DurationAscending = 'duration_ascending',
  DurationDescending = 'duration_descending',
  Instructor = 'instructor',
  NewestFirst = 'newest_first',
  None = 'none',
  PublishedDescending = 'published_descending'
}

export enum VideoSortAttribute {
  Alphabetical = 'alphabetical',
  Duration = 'duration',
  Instructor = 'instructor',
  NewestFirst = 'newest_first'
}

export type VideosCountByGenre = {
  __typename?: 'VideosCountByGenre';
  channel?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
};

export type VideosLibrarySection = {
  __typename?: 'VideosLibrarySection';
  description?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  videosLibrary?: Maybe<Array<PageSection>>;
};

export type WaitingItemInfo = {
  __typename?: 'WaitingItemInfo';
  startDate?: Maybe<Scalars['ISO8601Date']>;
  waitingListEnabled?: Maybe<Scalars['Boolean']>;
  waitingListEndDate?: Maybe<Scalars['ISO8601Date']>;
  waitingListStartDate?: Maybe<Scalars['ISO8601Date']>;
};

/** Autogenerated return type of WatchCompleted */
export type WatchCompletedPayload = {
  __typename?: 'WatchCompletedPayload';
  errors?: Maybe<Array<Error>>;
};

/** Autogenerated return type of Watch */
export type WatchPayload = {
  __typename?: 'WatchPayload';
  errors?: Maybe<Array<Error>>;
};

export type WeeklyProgram = {
  __typename?: 'WeeklyProgram';
  description?: Maybe<Scalars['String']>;
  finished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  intro?: Maybe<SpecialSection>;
  outro?: Maybe<SpecialSection>;
  progress?: Maybe<Scalars['Float']>;
  recomendation?: Maybe<Scalars['String']>;
  slug: Scalars['String'];
  tags: Array<Scalars['String']>;
  weeks?: Maybe<Array<Maybe<ProgramWeek>>>;
};

export enum WellnessProviderKind {
  Actiway = 'Actiway',
  Benefits = 'Benefits',
  Benify = 'Benify',
  Epassi = 'Epassi',
  Wellnet = 'Wellnet'
}

export type AddFavoritedVideoMutationVariables = Exact<{
  videoId: Scalars['ID'];
}>;


export type AddFavoritedVideoMutation = { __typename?: 'Mutation', addFavoriteVideo?: { __typename?: 'AddFavoriteVideoPayload', video?: { __typename?: 'Video', favorited: boolean, id: string } | null } | null };

export type AuthenticationMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type AuthenticationMutation = { __typename?: 'Mutation', authenticateUser?: { __typename?: 'AuthenticateUserPayload', token?: string | null, user?: { __typename?: 'CurrentUser', accessToken?: string | null } | { __typename?: 'User', accessToken?: string | null } | null } | null };

export type ChangeProfilDataMutationVariables = Exact<{
  displayName?: InputMaybe<Scalars['String']>;
  shortBio?: InputMaybe<Scalars['String']>;
  instagramUrl?: InputMaybe<Scalars['String']>;
  facebookUrl?: InputMaybe<Scalars['String']>;
  linkedinUrl?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
  avatar?: InputMaybe<Scalars['Upload']>;
}>;


export type ChangeProfilDataMutation = { __typename?: 'Mutation', changeProfileData?: { __typename?: 'ChangeProfileDataPayload', user: { __typename?: 'CurrentUser', assets?: { __typename?: 'Assets', avatar?: string | null } | null, profile?: { __typename?: 'Profile', displayName?: string | null, shortBio?: string | null, facebookURL?: string | null, instagramURL?: string | null, linkedinURL?: string | null, timezone?: string | null } | null } | { __typename?: 'User', assets?: { __typename?: 'Assets', avatar?: string | null } | null, profile?: { __typename?: 'Profile', displayName?: string | null, shortBio?: string | null, facebookURL?: string | null, instagramURL?: string | null, linkedinURL?: string | null, timezone?: string | null } | null } } | null };

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = { __typename?: 'Query', currentUser?: { __typename?: 'CurrentUser', accessToken?: string | null, accessUntil?: string | null, id: string, email?: string | null, firstName?: string | null, assets?: { __typename?: 'Assets', avatar?: string | null } | null, profile?: { __typename?: 'Profile', displayName?: string | null, shortBio?: string | null, facebookURL?: string | null, instagramURL?: string | null, linkedinURL?: string | null, timezone?: string | null } | null, favorites?: { __typename?: 'Favorites', videos: Array<string | null> } | null } | null };

export type DeleteAvatarMutationVariables = Exact<{ [key: string]: never; }>;


export type DeleteAvatarMutation = { __typename?: 'Mutation', deleteAvatar?: { __typename?: 'DeleteAvatarPayload', user?: { __typename?: 'CurrentUser', assets?: { __typename?: 'Assets', avatar?: string | null } | null } | { __typename?: 'User', assets?: { __typename?: 'Assets', avatar?: string | null } | null } | null } | null };

export type DeleteFavoriteVideoMutationVariables = Exact<{
  videoId: Scalars['ID'];
}>;


export type DeleteFavoriteVideoMutation = { __typename?: 'Mutation', deleteFavoriteVideo?: { __typename?: 'DeleteFavoriteVideoPayload', video?: { __typename?: 'Video', favorited: boolean } | null } | null };

export type GetFavoriteVideosQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetFavoriteVideosQuery = { __typename?: 'Query', getFavoriteVideos?: { __typename?: 'PagedVideos', data: Array<{ __typename?: 'Video', identifier: string, kind: string, id: string, thumbnailUrl?: string | null, hls: string, shortDescription: string, meta?: { __typename?: 'VideoMeta', minutes?: number | null } | null, taxonomies: { __typename?: 'Taxonomy', styles?: Array<{ __typename?: 'Term', slug?: string | null } | null> | null, genre?: { __typename?: 'Term', genres?: Array<string | null> | null, name?: string | null, slug?: string | null } | null, instructors?: Array<{ __typename?: 'Instructor', slug?: string | null, name?: string | null } | null> | null, flavor?: { __typename?: 'Term', name?: string | null } | null }, primaryStyle?: { __typename?: 'Term', genres?: Array<string | null> | null, name?: string | null, slug?: string | null, types?: Array<string | null> | null } | null, content?: { __typename?: 'VideoContent', title?: string | null, shortDescription?: string | null } | null }> } | null };

export type GetFavoritedQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetFavoritedQuery = { __typename?: 'Query', getFavoriteVideos?: { __typename?: 'PagedVideos', data: Array<{ __typename?: 'Video', favorited: boolean, id: string }> } | null };

export type GetUserDataQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetUserDataQuery = { __typename?: 'Query', getUser?: { __typename?: 'User', id: string, firstName?: string | null, assets?: { __typename?: 'Assets', avatar?: string | null } | null } | null };

export type GetVideoQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetVideoQuery = { __typename?: 'Query', video?: { __typename?: 'Video', identifier: string, id: string, title: string, thumbnailUrl?: string | null, hls: string, longDescription: string, minutes: number, primaryStyle?: { __typename?: 'Term', name?: string | null } | null, taxonomies: { __typename?: 'Taxonomy', needs?: Array<{ __typename?: 'Term', name?: string | null } | null> | null, styles?: Array<{ __typename?: 'Term', genres?: Array<string | null> | null } | null> | null, instructors?: Array<{ __typename?: 'Instructor', name?: string | null } | null> | null } } | null };

export type GetvideosQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']>;
  perPage?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
}>;


export type GetvideosQuery = { __typename?: 'Query', videos: { __typename?: 'PagedVideos', page: number, perPage: number, totalCount: number, data: Array<{ __typename?: 'Video', identifier: string, kind: string, id: string, thumbnailUrl?: string | null, hls: string, shortDescription: string, meta?: { __typename?: 'VideoMeta', minutes?: number | null } | null, taxonomies: { __typename?: 'Taxonomy', styles?: Array<{ __typename?: 'Term', slug?: string | null } | null> | null, genre?: { __typename?: 'Term', genres?: Array<string | null> | null, name?: string | null, slug?: string | null } | null, instructors?: Array<{ __typename?: 'Instructor', slug?: string | null, name?: string | null } | null> | null, flavor?: { __typename?: 'Term', name?: string | null } | null }, primaryStyle?: { __typename?: 'Term', genres?: Array<string | null> | null, name?: string | null, slug?: string | null, types?: Array<string | null> | null } | null, content?: { __typename?: 'VideoContent', title?: string | null, shortDescription?: string | null } | null }> } };

export type LastViewedSeassionsQueryVariables = Exact<{ [key: string]: never; }>;


export type LastViewedSeassionsQuery = { __typename?: 'Query', lastWatchedSessions: Array<{ __typename?: 'Video', identifier: string, kind: string, id: string, thumbnailUrl?: string | null, hls: string, shortDescription: string, meta?: { __typename?: 'VideoMeta', minutes?: number | null } | null, taxonomies: { __typename?: 'Taxonomy', styles?: Array<{ __typename?: 'Term', slug?: string | null } | null> | null, genre?: { __typename?: 'Term', genres?: Array<string | null> | null, name?: string | null, slug?: string | null } | null, instructors?: Array<{ __typename?: 'Instructor', slug?: string | null, name?: string | null } | null> | null, flavor?: { __typename?: 'Term', name?: string | null } | null }, primaryStyle?: { __typename?: 'Term', genres?: Array<string | null> | null, name?: string | null, slug?: string | null, types?: Array<string | null> | null } | null, content?: { __typename?: 'VideoContent', title?: string | null, shortDescription?: string | null } | null }> };

export type LoginMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type LoginMutation = { __typename?: 'Mutation', login?: { __typename?: 'LoginPayload', user?: { __typename?: 'CurrentUser', email?: string | null } | { __typename?: 'User', email?: string | null } | null } | null };

export type LogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutMutation = { __typename?: 'Mutation', logout?: { __typename?: 'LogoutPayload', status?: string | null } | null };

export type GetRelatedVideosQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetRelatedVideosQuery = { __typename?: 'Query', relatedVideos?: Array<{ __typename?: 'Video', identifier: string, shortDescription: string, minutes: number, title: string, thumbnailUrl?: string | null } | null> | null };

export type SignupMutationVariables = Exact<{
  firstName: Scalars['String'];
  lastName?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  password: Scalars['String'];
  country?: InputMaybe<Scalars['String']>;
  platform: DevicePlatformKind;
}>;


export type SignupMutation = { __typename?: 'Mutation', signUpV2?: { __typename?: 'RegistrationV2Payload', errors?: Array<{ __typename?: 'Error', message?: string | null }> | null, user?: { __typename?: 'CurrentUser', id: string } | null } | null };

export type VideosDataFieldFragment = { __typename?: 'Video', identifier: string, kind: string, id: string, thumbnailUrl?: string | null, hls: string, shortDescription: string, meta?: { __typename?: 'VideoMeta', minutes?: number | null } | null, taxonomies: { __typename?: 'Taxonomy', styles?: Array<{ __typename?: 'Term', slug?: string | null } | null> | null, genre?: { __typename?: 'Term', genres?: Array<string | null> | null, name?: string | null, slug?: string | null } | null, instructors?: Array<{ __typename?: 'Instructor', slug?: string | null, name?: string | null } | null> | null, flavor?: { __typename?: 'Term', name?: string | null } | null }, primaryStyle?: { __typename?: 'Term', genres?: Array<string | null> | null, name?: string | null, slug?: string | null, types?: Array<string | null> | null } | null, content?: { __typename?: 'VideoContent', title?: string | null, shortDescription?: string | null } | null };

export const VideosDataFieldFragmentDoc = gql`
    fragment videosDataField on Video {
  identifier
  kind
  id
  thumbnailUrl
  hls
  shortDescription
  meta {
    minutes
  }
  taxonomies {
    styles {
      slug
    }
    genre {
      genres
      name
      slug
    }
    instructors {
      slug
      name
    }
    flavor {
      name
    }
  }
  primaryStyle {
    genres
    name
    slug
    types
  }
  content {
    title
    shortDescription
  }
}
    `;
export const AddFavoritedVideoDocument = gql`
    mutation addFavoritedVideo($videoId: ID!) {
  addFavoriteVideo(videoId: $videoId) {
    video {
      favorited
      id
    }
  }
}
    `;
export type AddFavoritedVideoMutationFn = Apollo.MutationFunction<AddFavoritedVideoMutation, AddFavoritedVideoMutationVariables>;

/**
 * __useAddFavoritedVideoMutation__
 *
 * To run a mutation, you first call `useAddFavoritedVideoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddFavoritedVideoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addFavoritedVideoMutation, { data, loading, error }] = useAddFavoritedVideoMutation({
 *   variables: {
 *      videoId: // value for 'videoId'
 *   },
 * });
 */
export function useAddFavoritedVideoMutation(baseOptions?: Apollo.MutationHookOptions<AddFavoritedVideoMutation, AddFavoritedVideoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddFavoritedVideoMutation, AddFavoritedVideoMutationVariables>(AddFavoritedVideoDocument, options);
      }
export type AddFavoritedVideoMutationHookResult = ReturnType<typeof useAddFavoritedVideoMutation>;
export type AddFavoritedVideoMutationResult = Apollo.MutationResult<AddFavoritedVideoMutation>;
export type AddFavoritedVideoMutationOptions = Apollo.BaseMutationOptions<AddFavoritedVideoMutation, AddFavoritedVideoMutationVariables>;
export const AuthenticationDocument = gql`
    mutation authentication($email: String!, $password: String!) {
  authenticateUser(email: $email, password: $password) {
    token
    user {
      accessToken
    }
  }
}
    `;
export type AuthenticationMutationFn = Apollo.MutationFunction<AuthenticationMutation, AuthenticationMutationVariables>;

/**
 * __useAuthenticationMutation__
 *
 * To run a mutation, you first call `useAuthenticationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAuthenticationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [authenticationMutation, { data, loading, error }] = useAuthenticationMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useAuthenticationMutation(baseOptions?: Apollo.MutationHookOptions<AuthenticationMutation, AuthenticationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AuthenticationMutation, AuthenticationMutationVariables>(AuthenticationDocument, options);
      }
export type AuthenticationMutationHookResult = ReturnType<typeof useAuthenticationMutation>;
export type AuthenticationMutationResult = Apollo.MutationResult<AuthenticationMutation>;
export type AuthenticationMutationOptions = Apollo.BaseMutationOptions<AuthenticationMutation, AuthenticationMutationVariables>;
export const ChangeProfilDataDocument = gql`
    mutation changeProfilData($displayName: String, $shortBio: String, $instagramUrl: String, $facebookUrl: String, $linkedinUrl: String, $timezone: String, $avatar: Upload) {
  changeProfileData(
    displayName: $displayName
    shortBio: $shortBio
    instagramUrl: $instagramUrl
    facebookUrl: $facebookUrl
    linkedinUrl: $linkedinUrl
    timezone: $timezone
    avatar: $avatar
  ) {
    user {
      assets {
        avatar
      }
      profile {
        displayName
        shortBio
        facebookURL
        instagramURL
        linkedinURL
        timezone
      }
    }
  }
}
    `;
export type ChangeProfilDataMutationFn = Apollo.MutationFunction<ChangeProfilDataMutation, ChangeProfilDataMutationVariables>;

/**
 * __useChangeProfilDataMutation__
 *
 * To run a mutation, you first call `useChangeProfilDataMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeProfilDataMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeProfilDataMutation, { data, loading, error }] = useChangeProfilDataMutation({
 *   variables: {
 *      displayName: // value for 'displayName'
 *      shortBio: // value for 'shortBio'
 *      instagramUrl: // value for 'instagramUrl'
 *      facebookUrl: // value for 'facebookUrl'
 *      linkedinUrl: // value for 'linkedinUrl'
 *      timezone: // value for 'timezone'
 *      avatar: // value for 'avatar'
 *   },
 * });
 */
export function useChangeProfilDataMutation(baseOptions?: Apollo.MutationHookOptions<ChangeProfilDataMutation, ChangeProfilDataMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangeProfilDataMutation, ChangeProfilDataMutationVariables>(ChangeProfilDataDocument, options);
      }
export type ChangeProfilDataMutationHookResult = ReturnType<typeof useChangeProfilDataMutation>;
export type ChangeProfilDataMutationResult = Apollo.MutationResult<ChangeProfilDataMutation>;
export type ChangeProfilDataMutationOptions = Apollo.BaseMutationOptions<ChangeProfilDataMutation, ChangeProfilDataMutationVariables>;
export const CurrentUserDocument = gql`
    query currentUser {
  currentUser {
    accessToken
    accessUntil
    id
    email
    firstName
    assets {
      avatar
    }
    profile {
      displayName
      shortBio
      facebookURL
      instagramURL
      linkedinURL
      timezone
    }
    favorites {
      videos
    }
  }
}
    `;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
      }
export function useCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;
export type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;
export type CurrentUserQueryResult = Apollo.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;
export const DeleteAvatarDocument = gql`
    mutation deleteAvatar {
  deleteAvatar {
    user {
      assets {
        avatar
      }
    }
  }
}
    `;
export type DeleteAvatarMutationFn = Apollo.MutationFunction<DeleteAvatarMutation, DeleteAvatarMutationVariables>;

/**
 * __useDeleteAvatarMutation__
 *
 * To run a mutation, you first call `useDeleteAvatarMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteAvatarMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteAvatarMutation, { data, loading, error }] = useDeleteAvatarMutation({
 *   variables: {
 *   },
 * });
 */
export function useDeleteAvatarMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAvatarMutation, DeleteAvatarMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteAvatarMutation, DeleteAvatarMutationVariables>(DeleteAvatarDocument, options);
      }
export type DeleteAvatarMutationHookResult = ReturnType<typeof useDeleteAvatarMutation>;
export type DeleteAvatarMutationResult = Apollo.MutationResult<DeleteAvatarMutation>;
export type DeleteAvatarMutationOptions = Apollo.BaseMutationOptions<DeleteAvatarMutation, DeleteAvatarMutationVariables>;
export const DeleteFavoriteVideoDocument = gql`
    mutation deleteFavoriteVideo($videoId: ID!) {
  deleteFavoriteVideo(videoId: $videoId) {
    video {
      favorited
    }
  }
}
    `;
export type DeleteFavoriteVideoMutationFn = Apollo.MutationFunction<DeleteFavoriteVideoMutation, DeleteFavoriteVideoMutationVariables>;

/**
 * __useDeleteFavoriteVideoMutation__
 *
 * To run a mutation, you first call `useDeleteFavoriteVideoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteFavoriteVideoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteFavoriteVideoMutation, { data, loading, error }] = useDeleteFavoriteVideoMutation({
 *   variables: {
 *      videoId: // value for 'videoId'
 *   },
 * });
 */
export function useDeleteFavoriteVideoMutation(baseOptions?: Apollo.MutationHookOptions<DeleteFavoriteVideoMutation, DeleteFavoriteVideoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteFavoriteVideoMutation, DeleteFavoriteVideoMutationVariables>(DeleteFavoriteVideoDocument, options);
      }
export type DeleteFavoriteVideoMutationHookResult = ReturnType<typeof useDeleteFavoriteVideoMutation>;
export type DeleteFavoriteVideoMutationResult = Apollo.MutationResult<DeleteFavoriteVideoMutation>;
export type DeleteFavoriteVideoMutationOptions = Apollo.BaseMutationOptions<DeleteFavoriteVideoMutation, DeleteFavoriteVideoMutationVariables>;
export const GetFavoriteVideosDocument = gql`
    query getFavoriteVideos($id: ID!) {
  getFavoriteVideos(id: $id) {
    data {
      ...videosDataField
    }
  }
}
    ${VideosDataFieldFragmentDoc}`;

/**
 * __useGetFavoriteVideosQuery__
 *
 * To run a query within a React component, call `useGetFavoriteVideosQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFavoriteVideosQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFavoriteVideosQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFavoriteVideosQuery(baseOptions: Apollo.QueryHookOptions<GetFavoriteVideosQuery, GetFavoriteVideosQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFavoriteVideosQuery, GetFavoriteVideosQueryVariables>(GetFavoriteVideosDocument, options);
      }
export function useGetFavoriteVideosLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFavoriteVideosQuery, GetFavoriteVideosQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFavoriteVideosQuery, GetFavoriteVideosQueryVariables>(GetFavoriteVideosDocument, options);
        }
export type GetFavoriteVideosQueryHookResult = ReturnType<typeof useGetFavoriteVideosQuery>;
export type GetFavoriteVideosLazyQueryHookResult = ReturnType<typeof useGetFavoriteVideosLazyQuery>;
export type GetFavoriteVideosQueryResult = Apollo.QueryResult<GetFavoriteVideosQuery, GetFavoriteVideosQueryVariables>;
export const GetFavoritedDocument = gql`
    query getFavorited($id: ID!) {
  getFavoriteVideos(id: $id) {
    data {
      favorited
      id
    }
  }
}
    `;

/**
 * __useGetFavoritedQuery__
 *
 * To run a query within a React component, call `useGetFavoritedQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFavoritedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFavoritedQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFavoritedQuery(baseOptions: Apollo.QueryHookOptions<GetFavoritedQuery, GetFavoritedQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFavoritedQuery, GetFavoritedQueryVariables>(GetFavoritedDocument, options);
      }
export function useGetFavoritedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFavoritedQuery, GetFavoritedQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFavoritedQuery, GetFavoritedQueryVariables>(GetFavoritedDocument, options);
        }
export type GetFavoritedQueryHookResult = ReturnType<typeof useGetFavoritedQuery>;
export type GetFavoritedLazyQueryHookResult = ReturnType<typeof useGetFavoritedLazyQuery>;
export type GetFavoritedQueryResult = Apollo.QueryResult<GetFavoritedQuery, GetFavoritedQueryVariables>;
export const GetUserDataDocument = gql`
    query getUserData($id: ID!) {
  getUser(id: $id) {
    id
    firstName
    assets {
      avatar
    }
  }
}
    `;

/**
 * __useGetUserDataQuery__
 *
 * To run a query within a React component, call `useGetUserDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserDataQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetUserDataQuery(baseOptions: Apollo.QueryHookOptions<GetUserDataQuery, GetUserDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserDataQuery, GetUserDataQueryVariables>(GetUserDataDocument, options);
      }
export function useGetUserDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserDataQuery, GetUserDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserDataQuery, GetUserDataQueryVariables>(GetUserDataDocument, options);
        }
export type GetUserDataQueryHookResult = ReturnType<typeof useGetUserDataQuery>;
export type GetUserDataLazyQueryHookResult = ReturnType<typeof useGetUserDataLazyQuery>;
export type GetUserDataQueryResult = Apollo.QueryResult<GetUserDataQuery, GetUserDataQueryVariables>;
export const GetVideoDocument = gql`
    query getVideo($id: ID!) {
  video(id: $id) {
    identifier
    id
    title
    thumbnailUrl
    hls
    longDescription
    minutes
    primaryStyle {
      name
    }
    taxonomies {
      needs {
        name
      }
      styles {
        genres
      }
      instructors {
        name
      }
    }
  }
}
    `;

/**
 * __useGetVideoQuery__
 *
 * To run a query within a React component, call `useGetVideoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetVideoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetVideoQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetVideoQuery(baseOptions: Apollo.QueryHookOptions<GetVideoQuery, GetVideoQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetVideoQuery, GetVideoQueryVariables>(GetVideoDocument, options);
      }
export function useGetVideoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetVideoQuery, GetVideoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetVideoQuery, GetVideoQueryVariables>(GetVideoDocument, options);
        }
export type GetVideoQueryHookResult = ReturnType<typeof useGetVideoQuery>;
export type GetVideoLazyQueryHookResult = ReturnType<typeof useGetVideoLazyQuery>;
export type GetVideoQueryResult = Apollo.QueryResult<GetVideoQuery, GetVideoQueryVariables>;
export const GetvideosDocument = gql`
    query getvideos($page: Int, $perPage: Int, $query: String) {
  videos(page: $page, perPage: $perPage, query: $query) {
    page
    perPage
    totalCount
    data {
      ...videosDataField
    }
  }
}
    ${VideosDataFieldFragmentDoc}`;

/**
 * __useGetvideosQuery__
 *
 * To run a query within a React component, call `useGetvideosQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetvideosQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetvideosQuery({
 *   variables: {
 *      page: // value for 'page'
 *      perPage: // value for 'perPage'
 *      query: // value for 'query'
 *   },
 * });
 */
export function useGetvideosQuery(baseOptions?: Apollo.QueryHookOptions<GetvideosQuery, GetvideosQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetvideosQuery, GetvideosQueryVariables>(GetvideosDocument, options);
      }
export function useGetvideosLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetvideosQuery, GetvideosQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetvideosQuery, GetvideosQueryVariables>(GetvideosDocument, options);
        }
export type GetvideosQueryHookResult = ReturnType<typeof useGetvideosQuery>;
export type GetvideosLazyQueryHookResult = ReturnType<typeof useGetvideosLazyQuery>;
export type GetvideosQueryResult = Apollo.QueryResult<GetvideosQuery, GetvideosQueryVariables>;
export const LastViewedSeassionsDocument = gql`
    query lastViewedSeassions {
  lastWatchedSessions {
    ...videosDataField
  }
}
    ${VideosDataFieldFragmentDoc}`;

/**
 * __useLastViewedSeassionsQuery__
 *
 * To run a query within a React component, call `useLastViewedSeassionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useLastViewedSeassionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLastViewedSeassionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useLastViewedSeassionsQuery(baseOptions?: Apollo.QueryHookOptions<LastViewedSeassionsQuery, LastViewedSeassionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LastViewedSeassionsQuery, LastViewedSeassionsQueryVariables>(LastViewedSeassionsDocument, options);
      }
export function useLastViewedSeassionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LastViewedSeassionsQuery, LastViewedSeassionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LastViewedSeassionsQuery, LastViewedSeassionsQueryVariables>(LastViewedSeassionsDocument, options);
        }
export type LastViewedSeassionsQueryHookResult = ReturnType<typeof useLastViewedSeassionsQuery>;
export type LastViewedSeassionsLazyQueryHookResult = ReturnType<typeof useLastViewedSeassionsLazyQuery>;
export type LastViewedSeassionsQueryResult = Apollo.QueryResult<LastViewedSeassionsQuery, LastViewedSeassionsQueryVariables>;
export const LoginDocument = gql`
    mutation Login($email: String!, $password: String!) {
  login(email: $email, password: $password) {
    user {
      email
    }
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const LogoutDocument = gql`
    mutation Logout {
  logout {
    status
  }
}
    `;
export type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);
      }
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;
export type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export const GetRelatedVideosDocument = gql`
    query getRelatedVideos($id: ID!) {
  relatedVideos(id: $id) {
    identifier
    shortDescription
    minutes
    title
    thumbnailUrl
  }
}
    `;

/**
 * __useGetRelatedVideosQuery__
 *
 * To run a query within a React component, call `useGetRelatedVideosQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRelatedVideosQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRelatedVideosQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetRelatedVideosQuery(baseOptions: Apollo.QueryHookOptions<GetRelatedVideosQuery, GetRelatedVideosQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetRelatedVideosQuery, GetRelatedVideosQueryVariables>(GetRelatedVideosDocument, options);
      }
export function useGetRelatedVideosLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRelatedVideosQuery, GetRelatedVideosQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetRelatedVideosQuery, GetRelatedVideosQueryVariables>(GetRelatedVideosDocument, options);
        }
export type GetRelatedVideosQueryHookResult = ReturnType<typeof useGetRelatedVideosQuery>;
export type GetRelatedVideosLazyQueryHookResult = ReturnType<typeof useGetRelatedVideosLazyQuery>;
export type GetRelatedVideosQueryResult = Apollo.QueryResult<GetRelatedVideosQuery, GetRelatedVideosQueryVariables>;
export const SignupDocument = gql`
    mutation signup($firstName: String!, $lastName: String, $email: String!, $password: String!, $country: String, $platform: DevicePlatformKind!) {
  signUpV2(
    firstName: $firstName
    lastName: $lastName
    email: $email
    password: $password
    country: $country
    platform: $platform
  ) {
    errors {
      message
    }
    user {
      id
    }
  }
}
    `;
export type SignupMutationFn = Apollo.MutationFunction<SignupMutation, SignupMutationVariables>;

/**
 * __useSignupMutation__
 *
 * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signupMutation, { data, loading, error }] = useSignupMutation({
 *   variables: {
 *      firstName: // value for 'firstName'
 *      lastName: // value for 'lastName'
 *      email: // value for 'email'
 *      password: // value for 'password'
 *      country: // value for 'country'
 *      platform: // value for 'platform'
 *   },
 * });
 */
export function useSignupMutation(baseOptions?: Apollo.MutationHookOptions<SignupMutation, SignupMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, options);
      }
export type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;
export type SignupMutationResult = Apollo.MutationResult<SignupMutation>;
export type SignupMutationOptions = Apollo.BaseMutationOptions<SignupMutation, SignupMutationVariables>;